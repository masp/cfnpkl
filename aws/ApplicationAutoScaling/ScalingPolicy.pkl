/// Resource Type definition for
/// AWS::ApplicationAutoScaling::ScalingPolicy
extends ".../AWS/Resource.pkl"
Type = "AWS::ApplicationAutoScaling::ScalingPolicy"
Properties: Props?
class Props {
    /// The name of the scaling policy.  Updates to the name of a target
    /// tracking scaling policy are not supported, unless you also update the
    /// metric used for scaling. To change only a target tracking scaling
    /// policy's name, first delete the policy by removing the existing
    /// AWS::ApplicationAutoScaling::ScalingPolicy resource from the template
    /// and updating the stack. Then, recreate the resource with the same
    /// settings and a different name.
    PolicyName: String?
    /// The scaling policy type.  The following policy types are supported:
    /// TargetTrackingScaling Not supported for Amazon EMR  StepScaling Not
    /// supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces,
    /// Amazon MSK, Amazon ElastiCache, or Neptune.
    PolicyType: String?
    /// The identifier of the resource associated with the scaling policy.
    /// This string consists of the resource type and unique identifier.
    ResourceId: String?
    /// The scalable dimension. This string consists of the service namespace,
    /// resource type, and scaling property.
    ScalableDimension: String?
    /// The CloudFormation-generated ID of an Application Auto Scaling
    /// scalable target. For more information about the ID, see the Return
    /// Value section of the AWS::ApplicationAutoScaling::ScalableTarget
    /// resource.
    ScalingTargetId: String?
    /// The namespace of the AWS service that provides the resource, or a
    /// custom-resource.
    ServiceNamespace: String?
    /// A step scaling policy.
    StepScalingPolicyConfiguration: StepScalingPolicyConfiguration?
    /// A target tracking scaling policy.
    TargetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration?
    /// ARN is a read only property for the resource.
    Arn: String?
}
/// A step scaling policy.
class StepScalingPolicyConfiguration {
    /// Specifies how the ScalingAdjustment value in a StepAdjustment is
    /// interpreted.
    AdjustmentType: String?
    /// The amount of time, in seconds, to wait for a previous scaling
    /// activity to take effect.
    Cooldown: Int?
    /// The aggregation type for the CloudWatch metrics. Valid values are
    /// Minimum, Maximum, and Average. If the aggregation type is null, the
    /// value is treated as Average
    MetricAggregationType: String?
    /// The minimum value to scale by when the adjustment type is
    /// PercentChangeInCapacity.
    MinAdjustmentMagnitude: Int?
    /// A set of adjustments that enable you to scale based on the size of the
    /// alarm breach.
    StepAdjustments: Listing<StepAdjustment>?
}
/// Represents a step adjustment for a StepScalingPolicyConfiguration.
/// Describes an adjustment based on the difference between the value of
/// the aggregated CloudWatch metric and the breach threshold that you've
/// defined for the alarm.
class StepAdjustment {
    /// The lower bound for the difference between the alarm threshold and the
    /// CloudWatch metric. If the metric value is above the breach threshold,
    /// the lower bound is inclusive (the metric must be greater than or equal
    /// to the threshold plus the lower bound). Otherwise, it is exclusive
    /// (the metric must be greater than the threshold plus the lower bound).
    /// A null value indicates negative infinity.
    MetricIntervalLowerBound: Float?
    /// The upper bound for the difference between the alarm threshold and the
    /// CloudWatch metric. If the metric value is above the breach threshold,
    /// the upper bound is exclusive (the metric must be less than the
    /// threshold plus the upper bound). Otherwise, it is inclusive (the
    /// metric must be less than or equal to the threshold plus the upper
    /// bound). A null value indicates positive infinity.
    MetricIntervalUpperBound: Float?
    /// The amount by which to scale, based on the specified adjustment type.
    /// A positive value adds to the current capacity while a negative number
    /// removes from the current capacity. For exact capacity, you must
    /// specify a positive value.
    ScalingAdjustment: Int
}
/// A target tracking scaling policy.
class TargetTrackingScalingPolicyConfiguration {
    /// A customized metric. You can specify either a predefined metric or a
    /// customized metric.
    CustomizedMetricSpecification: CustomizedMetricSpecification?
    /// Indicates whether scale in by the target tracking scaling policy is
    /// disabled. If the value is true, scale in is disabled and the target
    /// tracking scaling policy won't remove capacity from the scalable
    /// target. Otherwise, scale in is enabled and the target tracking scaling
    /// policy can remove capacity from the scalable target. The default value
    /// is false.
    DisableScaleIn: Boolean?
    /// A predefined metric. You can specify either a predefined metric or a
    /// customized metric.
    PredefinedMetricSpecification: PredefinedMetricSpecification?
    /// The amount of time, in seconds, after a scale-in activity completes
    /// before another scale-in activity can start.
    ScaleInCooldown: Int?
    /// The amount of time, in seconds, to wait for a previous scale-out
    /// activity to take effect.
    ScaleOutCooldown: Int?
    /// The target value for the metric. Although this property accepts
    /// numbers of type Double, it won't accept values that are either too
    /// small or too large. Values must be in the range of -2^360 to 2^360.
    /// The value must be a valid number based on the choice of metric. For
    /// example, if the metric is CPU utilization, then the target value is a
    /// percent value that represents how much of the CPU can be used before
    /// scaling out.
    TargetValue: Float
}
/// Represents a CloudWatch metric of your choosing for a target tracking
/// scaling policy to use with Application Auto Scaling.
class CustomizedMetricSpecification {
    /// The dimensions of the metric.
    Dimensions: Listing<MetricDimension>?
    /// The name of the metric. To get the exact metric name, namespace, and
    /// dimensions, inspect the Metric object that is returned by a call to
    /// ListMetrics.
    MetricName: String?
    /// The namespace of the metric.
    Namespace: String?
    /// The statistic of the metric.
    Statistic: String?
    /// The unit of the metric. For a complete list of the units that
    /// CloudWatch supports, see the MetricDatum data type in the Amazon
    /// CloudWatch API Reference.
    Unit: String?
    /// The metrics to include in the target tracking scaling policy, as a
    /// metric data query. This can include both raw metric and metric math
    /// expressions.
    Metrics: Listing<TargetTrackingMetricDataQuery>?
}
/// Describes the dimension names and values associated with a metric.
class MetricDimension {
    /// The name of the dimension.
    Name: String
    /// The value of the dimension.
    Value: String
}
/// The metric data to return. Also defines whether this call is returning
/// data for one metric only, or whether it is performing a math
/// expression on the values of returned metric statistics to create a new
/// time series. A time series is a series of data points, each of which
/// is associated with a timestamp.
class TargetTrackingMetricDataQuery {
    /// The math expression to perform on the returned data, if this object is
    /// performing a math expression.
    Expression: String?
    /// A short name that identifies the object's results in the response.
    Id: String?
    /// A human-readable label for this metric or expression. This is
    /// especially useful if this is a math expression, so that you know what
    /// the value represents.
    Label: String?
    /// Indicates whether to return the timestamps and raw data values of this
    /// metric.
    ReturnData: Boolean?
    /// Information about the metric data to return.
    MetricStat: TargetTrackingMetricStat?
}
/// This structure defines the CloudWatch metric to return, along with the
/// statistic, period, and unit.
class TargetTrackingMetricStat {
    /// The CloudWatch metric to return, including the metric name, namespace,
    /// and dimensions.
    Metric: TargetTrackingMetric?
    /// The statistic to return. It can include any CloudWatch statistic or
    /// extended statistic.
    Stat: String?
    /// The unit to use for the returned data points.
    Unit: String?
}
/// Represents a specific metric.
class TargetTrackingMetric {
    /// The dimensions for the metric.
    Dimensions: Listing<TargetTrackingMetricDimension>?
    /// The name of the metric.
    MetricName: String?
    /// The namespace of the metric.
    Namespace: String?
}
/// Describes the dimension of a metric.
class TargetTrackingMetricDimension {
    /// The name of the dimension.
    Name: String?
    /// The value of the dimension.
    Value: String?
}
/// Represents a predefined metric for a target tracking scaling policy to
/// use with Application Auto Scaling.
class PredefinedMetricSpecification {
    /// The metric type. The ALBRequestCountPerTarget metric type applies only
    /// to Spot Fleets and ECS services.
    PredefinedMetricType: String
    /// Identifies the resource associated with the metric type. You can't
    /// specify a resource label unless the metric type is
    /// ALBRequestCountPerTarget and there is a target group attached to the
    /// Spot Fleet or ECS service.
    ResourceLabel: String?
}
