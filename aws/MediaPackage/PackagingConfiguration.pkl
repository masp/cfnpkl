/// Resource schema for AWS::MediaPackage::PackagingConfiguration
extends ".../AWS/Resource.pkl"
Type = "AWS::MediaPackage::PackagingConfiguration"
Properties: Props?
class Props {
    /// The ID of the PackagingConfiguration.
    Id: String?
    /// The ID of a PackagingGroup.
    PackagingGroupId: String?
    /// The ARN of the PackagingConfiguration.
    Arn: String?
    /// A CMAF packaging configuration.
    CmafPackage: CmafPackage?
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    DashPackage: DashPackage?
    /// An HTTP Live Streaming (HLS) packaging configuration.
    HlsPackage: HlsPackage?
    /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    MssPackage: MssPackage?
    /// A collection of tags associated with a resource
    Tags: Listing<Tag>?
}
/// A CMAF packaging configuration.
class CmafPackage {
    Encryption: CmafEncryption?
    /// A list of HLS manifest configurations.
    HlsManifests: Listing<HlsManifest>
    SegmentDurationSeconds: Int?
    /// When includeEncoderConfigurationInSegments is set to true,
    /// MediaPackage places your encoder's Sequence Parameter Set (SPS),
    /// Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in
    /// every video segment instead of in the init fragment. This lets you use
    /// different SPS/PPS/VPS settings for your assets during content
    /// playback.
    IncludeEncoderConfigurationInSegments: Boolean?
}
/// A CMAF encryption configuration.
class CmafEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}
/// A configuration for accessing an external Secure Packager and Encoder
/// Key Exchange (SPEKE) service that will provide encryption keys.
class SpekeKeyProvider {
    EncryptionContractConfiguration: EncryptionContractConfiguration?
    RoleArn: String
    /// The system IDs to include in key requests.
    SystemIds: Listing<String>
    /// The URL of the external key provider service.
    Url: String
}
/// The configuration to use for encrypting one or more content tracks
/// separately for endpoints that use SPEKE 2.0.
class EncryptionContractConfiguration {
    /// A collection of audio encryption presets.
    PresetSpeke20Audio: "PRESET-AUDIO-1" | "PRESET-AUDIO-2" | "PRESET-AUDIO-3" | "SHARED" | "UNENCRYPTED"
    /// A collection of video encryption presets.
    PresetSpeke20Video: "PRESET-VIDEO-1" | "PRESET-VIDEO-2" | "PRESET-VIDEO-3" | "PRESET-VIDEO-4" | "PRESET-VIDEO-5" | "PRESET-VIDEO-6" | "PRESET-VIDEO-7" | "PRESET-VIDEO-8" | "SHARED" | "UNENCRYPTED"
}
/// An HTTP Live Streaming (HLS) manifest configuration.
class HlsManifest {
    /// This setting controls how ad markers are included in the packaged
    /// OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the
    /// output. "PASSTHROUGH" causes the manifest to contain a copy of the
    /// SCTE-35 ad markers (comments) taken directly from the input HTTP Live
    /// Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and
    /// blackout tags based on SCTE-35 messages in the input source.
    AdMarkers: "NONE" | "SCTE35_ENHANCED" | "PASSTHROUGH" | *Null
    /// When enabled, an I-Frame only stream will be included in the output.
    IncludeIframeOnlyStream: Boolean?
    ManifestName: String?
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
    /// inserted into manifests. Additionally, when an interval is specified
    /// ID3Timed Metadata messages will be generated every 5 seconds using the
    /// ingest time of the content. If the interval is not specified, or set
    /// to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into
    /// manifests and no ID3Timed Metadata messages will be generated. Note
    /// that irrespective of this parameter, if any ID3 Timed Metadata is
    /// found in HTTP Live Streaming (HLS) input, it will be passed through to
    /// HLS output.
    ProgramDateTimeIntervalSeconds: Int?
    /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
    RepeatExtXKey: Boolean?
    StreamSelection: StreamSelection?
}
/// A StreamSelection configuration.
class StreamSelection {
    /// The maximum video bitrate (bps) to include in output.
    MaxVideoBitsPerSecond: Int?
    /// The minimum video bitrate (bps) to include in output.
    MinVideoBitsPerSecond: Int?
    /// A directive that determines the order of streams in the output.
    StreamOrder: "ORIGINAL" | "VIDEO_BITRATE_ASCENDING" | "VIDEO_BITRATE_DESCENDING" | *Null
}
/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
class DashPackage {
    /// A list of DASH manifest configurations.
    DashManifests: Listing<DashManifest>
    Encryption: DashEncryption?
    /// A list of triggers that controls when the outgoing Dynamic Adaptive
    /// Streaming over HTTP (DASH) Media Presentation Description (MPD) will
    /// be partitioned into multiple periods. If empty, the content will not
    /// be partitioned into more than one period. If the list contains "ADS",
    /// new periods will be created where the Asset contains SCTE-35 ad
    /// markers.
    PeriodTriggers: Listing<"ADS">?
    SegmentDurationSeconds: Int?
    /// Determines the type of SegmentTemplate included in the Media
    /// Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a
    /// full timeline is presented in each SegmentTemplate, with $Number$
    /// media URLs. When set to TIME_WITH_TIMELINE, a full timeline is
    /// presented in each SegmentTemplate, with $Time$ media URLs. When set to
    /// NUMBER_WITH_DURATION, only a duration is included in each
    /// SegmentTemplate, with $Number$ media URLs.
    SegmentTemplateFormat: "NUMBER_WITH_TIMELINE" | "TIME_WITH_TIMELINE" | "NUMBER_WITH_DURATION" | *Null
    /// When includeEncoderConfigurationInSegments is set to true,
    /// MediaPackage places your encoder's Sequence Parameter Set (SPS),
    /// Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in
    /// every video segment instead of in the init fragment. This lets you use
    /// different SPS/PPS/VPS settings for your assets during content
    /// playback.
    IncludeEncoderConfigurationInSegments: Boolean?
    /// When enabled, an I-Frame only stream will be included in the output.
    IncludeIframeOnlyStream: Boolean?
}
/// A DASH manifest configuration.
class DashManifest {
    /// Determines the position of some tags in the Media Presentation
    /// Description (MPD). When set to FULL, elements like SegmentTemplate and
    /// ContentProtection are included in each Representation. When set to
    /// COMPACT, duplicate elements are combined and presented at the
    /// AdaptationSet level.
    ManifestLayout: "FULL" | "COMPACT" | *Null
    ManifestName: String?
    /// Minimum duration (in seconds) that a player will buffer media before
    /// starting the presentation.
    MinBufferTimeSeconds: Int?
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set
    /// to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
    Profile: "NONE" | "HBBTV_1_5" | *Null
    /// The source of scte markers used. When set to SEGMENTS, the scte
    /// markers are sourced from the segments of the ingested content. When
    /// set to MANIFEST, the scte markers are sourced from the manifest of the
    /// ingested content.
    ScteMarkersSource: "SEGMENTS" | "MANIFEST" | *Null
    StreamSelection: StreamSelection?
}
/// A Dynamic Adaptive Streaming over HTTP (DASH) encryption
/// configuration.
class DashEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}
/// An HTTP Live Streaming (HLS) packaging configuration.
class HlsPackage {
    Encryption: HlsEncryption?
    /// A list of HLS manifest configurations.
    HlsManifests: Listing<HlsManifest>
    /// When enabled, MediaPackage passes through digital video broadcasting
    /// (DVB) subtitles into the output.
    IncludeDvbSubtitles: Boolean?
    SegmentDurationSeconds: Int?
    /// When enabled, audio streams will be placed in rendition groups in the
    /// output.
    UseAudioRenditionGroup: Boolean?
}
/// An HTTP Live Streaming (HLS) encryption configuration.
class HlsEncryption {
    /// An HTTP Live Streaming (HLS) encryption configuration.
    ConstantInitializationVector: String?
    /// The encryption method to use.
    EncryptionMethod: "AES_128" | "SAMPLE_AES" | *Null
    SpekeKeyProvider: SpekeKeyProvider
}
/// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
class MssPackage {
    Encryption: MssEncryption?
    /// A list of MSS manifest configurations.
    MssManifests: Listing<MssManifest>
    SegmentDurationSeconds: Int?
}
/// A CMAF encryption configuration.
class MssEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}
/// A Microsoft Smooth Streaming (MSS) manifest configuration.
class MssManifest {
    ManifestName: String?
    StreamSelection: StreamSelection?
}
class Tag {
    Key: String
    Value: String
}
