/// Resource schema for AWS::MediaPackage::OriginEndpoint
extends ".../AWS/Resource.pkl"
Type = "AWS::MediaPackage::OriginEndpoint"
Properties: Props?
class Props {
    /// The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
    Arn: String?
    /// The URL of the packaged OriginEndpoint for consumption.
    Url: String?
    /// The ID of the OriginEndpoint.
    Id: String(length <= 256 && length >= 1 && matches(Regex(#"\A[0-9a-zA-Z-_]+\Z"#)))?
    /// The ID of the Channel the OriginEndpoint is associated with.
    ChannelId: String?
    /// A short text description of the OriginEndpoint.
    Description: String?
    /// A list of source IP CIDR blocks that will be allowed to access the
    /// OriginEndpoint.
    Whitelist: Listing<String>?
    /// Maximum duration (seconds) of content to retain for startover
    /// playback. If not specified, startover playback will be disabled for
    /// the OriginEndpoint.
    StartoverWindowSeconds: Int?
    /// Amount of delay (seconds) to enforce on the playback of live content.
    /// If not specified, there will be no time delay in effect for the
    /// OriginEndpoint.
    TimeDelaySeconds: Int?
    /// A short string appended to the end of the OriginEndpoint URL.
    ManifestName: String?
    /// Control whether origination of video is allowed for this
    /// OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested,
    /// pursuant to any other form of access control. If set to DENY, the
    /// OriginEndpoint may not be requested. This can be helpful for Live to
    /// VOD harvesting, or for temporarily disabling origination
    Origination: "ALLOW" | "DENY" | *Null
    Authorization: Authorization?
    HlsPackage: HlsPackage?
    DashPackage: DashPackage?
    MssPackage: MssPackage?
    CmafPackage: CmafPackage?
    /// A collection of tags associated with a resource
    Tags: Listing<Tag>?
}
/// CDN Authorization credentials
class Authorization {
    /// The Amazon Resource Name (ARN) for the IAM role that allows
    /// MediaPackage to communicate with AWS Secrets Manager.
    SecretsRoleArn: String
    /// The Amazon Resource Name (ARN) for the secret in Secrets Manager that
    /// your Content Distribution Network (CDN) uses for authorization to
    /// access your endpoint.
    CdnIdentifierSecret: String
}
/// An HTTP Live Streaming (HLS) packaging configuration.
class HlsPackage {
    /// Duration (in seconds) of each fragment. Actual fragments will be
    /// rounded to the nearest multiple of the source fragment duration.
    SegmentDurationSeconds: Int?
    /// Time window (in seconds) contained in each parent manifest.
    PlaylistWindowSeconds: Int?
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or
    /// "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be
    /// included in the media playlist.
    PlaylistType: "NONE" | "EVENT" | "VOD" | *Null
    /// This setting controls how ad markers are included in the packaged
    /// OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the
    /// output. "PASSTHROUGH" causes the manifest to contain a copy of the
    /// SCTE-35 ad markers (comments) taken directly from the input HTTP Live
    /// Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and
    /// blackout tags based on SCTE-35 messages in the input source.
    /// "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program
    /// transition events in HLS and CMAF manifests. For this option, you must
    /// set a programDateTimeIntervalSeconds value that is greater than 0.
    AdMarkers: "NONE" | "SCTE35_ENHANCED" | "PASSTHROUGH" | "DATERANGE" | *Null
    /// A list of SCTE-35 message types that are treated as ad markers in the
    /// output.  If empty, no ad markers are output.  Specify multiple items
    /// to create ad markers for all of the included message types.
    AdTriggers: Listing<"SPLICE_INSERT" | "BREAK" | "PROVIDER_ADVERTISEMENT" | "DISTRIBUTOR_ADVERTISEMENT" | "PROVIDER_PLACEMENT_OPPORTUNITY" | "DISTRIBUTOR_PLACEMENT_OPPORTUNITY" | "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY" | "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY">?
    AdsOnDeliveryRestrictions: "NONE" | "RESTRICTED" | "UNRESTRICTED" | "BOTH" | *Null
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
    /// inserted into manifests. Additionally, when an interval is specified
    /// ID3Timed Metadata messages will be generated every 5 seconds using the
    /// ingest time of the content. If the interval is not specified, or set
    /// to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into
    /// manifests and no ID3Timed Metadata messages will be generated. Note
    /// that irrespective of this parameter, if any ID3 Timed Metadata is
    /// found in HTTP Live Streaming (HLS) input, it will be passed through to
    /// HLS output.
    ProgramDateTimeIntervalSeconds: Int?
    /// When enabled, an I-Frame only stream will be included in the output.
    IncludeIframeOnlyStream: Boolean?
    /// When enabled, audio streams will be placed in rendition groups in the
    /// output.
    UseAudioRenditionGroup: Boolean?
    /// When enabled, MediaPackage passes through digital video broadcasting
    /// (DVB) subtitles into the output.
    IncludeDvbSubtitles: Boolean?
    Encryption: HlsEncryption?
    StreamSelection: StreamSelection?
}
/// An HTTP Live Streaming (HLS) encryption configuration.
class HlsEncryption {
    /// The encryption method to use.
    EncryptionMethod: "AES_128" | "SAMPLE_AES" | *Null
    /// A constant initialization vector for encryption (optional). When not
    /// specified the initialization vector will be periodically rotated.
    ConstantInitializationVector: String?
    /// Interval (in seconds) between each encryption key rotation.
    KeyRotationIntervalSeconds: Int?
    /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
    RepeatExtXKey: Boolean?
    SpekeKeyProvider: SpekeKeyProvider
}
/// A configuration for accessing an external Secure Packager and Encoder
/// Key Exchange (SPEKE) service that will provide encryption keys.
class SpekeKeyProvider {
    /// The resource ID to include in key requests.
    ResourceId: String
    /// The system IDs to include in key requests.
    SystemIds: Listing<String>
    /// The URL of the external key provider service.
    Url: String
    /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental
    /// MediaPackage will assume when accessing the key provider service.
    RoleArn: String
    /// An Amazon Resource Name (ARN) of a Certificate Manager certificate
    /// that MediaPackage will use for enforcing secure end-to-end data
    /// transfer with the key provider service.
    CertificateArn: String?
    EncryptionContractConfiguration: EncryptionContractConfiguration?
}
/// The configuration to use for encrypting one or more content tracks
/// separately for endpoints that use SPEKE 2.0.
class EncryptionContractConfiguration {
    /// A collection of audio encryption presets.
    PresetSpeke20Audio: "PRESET-AUDIO-1" | "PRESET-AUDIO-2" | "PRESET-AUDIO-3" | "SHARED" | "UNENCRYPTED"
    /// A collection of video encryption presets.
    PresetSpeke20Video: "PRESET-VIDEO-1" | "PRESET-VIDEO-2" | "PRESET-VIDEO-3" | "PRESET-VIDEO-4" | "PRESET-VIDEO-5" | "PRESET-VIDEO-6" | "PRESET-VIDEO-7" | "PRESET-VIDEO-8" | "SHARED" | "UNENCRYPTED"
}
/// A StreamSelection configuration.
class StreamSelection {
    /// The minimum video bitrate (bps) to include in output.
    MinVideoBitsPerSecond: Int?
    /// The maximum video bitrate (bps) to include in output.
    MaxVideoBitsPerSecond: Int?
    /// A directive that determines the order of streams in the output.
    StreamOrder: "ORIGINAL" | "VIDEO_BITRATE_ASCENDING" | "VIDEO_BITRATE_DESCENDING" | *Null
}
/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
class DashPackage {
    /// Duration (in seconds) of each segment. Actual segments will be rounded
    /// to the nearest multiple of the source segment duration.
    SegmentDurationSeconds: Int?
    /// Time window (in seconds) contained in each manifest.
    ManifestWindowSeconds: Int?
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When
    /// set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
    Profile: "NONE" | "HBBTV_1_5" | "HYBRIDCAST" | "DVB_DASH_2014" | *Null
    /// Minimum duration (in seconds) between potential changes to the Dynamic
    /// Adaptive Streaming over HTTP (DASH) Media Presentation Description
    /// (MPD).
    MinUpdatePeriodSeconds: Int?
    /// Minimum duration (in seconds) that a player will buffer media before
    /// starting the presentation.
    MinBufferTimeSeconds: Int?
    /// Duration (in seconds) to delay live content before presentation.
    SuggestedPresentationDelaySeconds: Int?
    /// A list of triggers that controls when the outgoing Dynamic Adaptive
    /// Streaming over HTTP (DASH) Media Presentation Description (MPD) will
    /// be partitioned into multiple periods. If empty, the content will not
    /// be partitioned into more than one period. If the list contains "ADS",
    /// new periods will be created where the Channel source contains SCTE-35
    /// ad markers.
    PeriodTriggers: Listing<"ADS">?
    /// When enabled, an I-Frame only stream will be included in the output.
    IncludeIframeOnlyStream: Boolean?
    /// Determines the position of some tags in the Media Presentation
    /// Description (MPD).  When set to FULL, elements like SegmentTemplate
    /// and ContentProtection are included in each Representation.  When set
    /// to COMPACT, duplicate elements are combined and presented at the
    /// AdaptationSet level.
    ManifestLayout: "FULL" | "COMPACT" | "DRM_TOP_LEVEL_COMPACT" | *Null
    /// Determines the type of SegmentTemplate included in the Media
    /// Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a
    /// full timeline is presented in each SegmentTemplate, with $Number$
    /// media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is
    /// presented in each SegmentTemplate, with $Time$ media URLs. When set to
    /// NUMBER_WITH_DURATION, only a duration is included in each
    /// SegmentTemplate, with $Number$ media URLs.
    SegmentTemplateFormat: "NUMBER_WITH_TIMELINE" | "TIME_WITH_TIMELINE" | "NUMBER_WITH_DURATION" | *Null
    /// A list of SCTE-35 message types that are treated as ad markers in the
    /// output.  If empty, no ad markers are output.  Specify multiple items
    /// to create ad markers for all of the included message types.
    AdTriggers: Listing<"SPLICE_INSERT" | "BREAK" | "PROVIDER_ADVERTISEMENT" | "DISTRIBUTOR_ADVERTISEMENT" | "PROVIDER_PLACEMENT_OPPORTUNITY" | "DISTRIBUTOR_PLACEMENT_OPPORTUNITY" | "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY" | "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY">?
    AdsOnDeliveryRestrictions: "NONE" | "RESTRICTED" | "UNRESTRICTED" | "BOTH" | *Null
    Encryption: DashEncryption?
    StreamSelection: StreamSelection?
    /// Determines the type of UTCTiming included in the Media Presentation
    /// Description (MPD)
    UtcTiming: "HTTP-XSDATE" | "HTTP-ISO" | "HTTP-HEAD" | "NONE" | *Null
    /// Specifies the value attribute of the UTCTiming field when utcTiming is
    /// set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
    UtcTimingUri: String?
}
/// A Dynamic Adaptive Streaming over HTTP (DASH) encryption
/// configuration.
class DashEncryption {
    /// Time (in seconds) between each encryption key rotation.
    KeyRotationIntervalSeconds: Int?
    SpekeKeyProvider: SpekeKeyProvider
}
/// A Microsoft Smooth Streaming (MSS) packaging configuration.
class MssPackage {
    /// The time window (in seconds) contained in each manifest.
    ManifestWindowSeconds: Int?
    /// The duration (in seconds) of each segment.
    SegmentDurationSeconds: Int?
    Encryption: MssEncryption?
    StreamSelection: StreamSelection?
}
/// A Microsoft Smooth Streaming (MSS) encryption configuration.
class MssEncryption {
    SpekeKeyProvider: SpekeKeyProvider
}
/// A Common Media Application Format (CMAF) packaging configuration.
class CmafPackage {
    /// Duration (in seconds) of each segment. Actual segments will be rounded
    /// to the nearest multiple of the source segment duration.
    SegmentDurationSeconds: Int?
    /// An optional custom string that is prepended to the name of each
    /// segment. If not specified, it defaults to the ChannelId.
    SegmentPrefix: String?
    Encryption: CmafEncryption?
    StreamSelection: StreamSelection?
    /// A list of HLS manifest configurations
    HlsManifests: Listing<HlsManifest>?
}
/// A Common Media Application Format (CMAF) encryption configuration.
class CmafEncryption {
    /// Time (in seconds) between each encryption key rotation.
    KeyRotationIntervalSeconds: Int?
    SpekeKeyProvider: SpekeKeyProvider
    /// An optional 128-bit, 16-byte hex value represented by a 32-character
    /// string, used in conjunction with the key for encrypting blocks. If you
    /// don't specify a value, then MediaPackage creates the constant
    /// initialization vector (IV).
    ConstantInitializationVector: String(length <= 32 && length >= 32 && matches(Regex(#"\A[0-9a-fA-F]+\Z"#)))?
    /// The encryption method used
    EncryptionMethod: "SAMPLE_AES" | "AES_CTR" | *Null
}
/// A HTTP Live Streaming (HLS) manifest configuration.
class HlsManifest {
    /// The ID of the manifest. The ID must be unique within the
    /// OriginEndpoint and it cannot be changed after it is created.
    Id: String
    /// An optional short string appended to the end of the OriginEndpoint
    /// URL. If not specified, defaults to the manifestName for the
    /// OriginEndpoint.
    ManifestName: String?
    /// The URL of the packaged OriginEndpoint for consumption.
    Url: String?
    /// Time window (in seconds) contained in each parent manifest.
    PlaylistWindowSeconds: Int?
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or
    /// "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be
    /// included in the media playlist.
    PlaylistType: "NONE" | "EVENT" | "VOD" | *Null
    /// This setting controls how ad markers are included in the packaged
    /// OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the
    /// output. "PASSTHROUGH" causes the manifest to contain a copy of the
    /// SCTE-35 ad markers (comments) taken directly from the input HTTP Live
    /// Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and
    /// blackout tags based on SCTE-35 messages in the input source.
    /// "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program
    /// transition events in HLS and CMAF manifests. For this option, you must
    /// set a programDateTimeIntervalSeconds value that is greater than 0.
    AdMarkers: "NONE" | "SCTE35_ENHANCED" | "PASSTHROUGH" | "DATERANGE" | *Null
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
    /// inserted into manifests. Additionally, when an interval is specified
    /// ID3Timed Metadata messages will be generated every 5 seconds using the
    /// ingest time of the content. If the interval is not specified, or set
    /// to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into
    /// manifests and no ID3Timed Metadata messages will be generated. Note
    /// that irrespective of this parameter, if any ID3 Timed Metadata is
    /// found in HTTP Live Streaming (HLS) input, it will be passed through to
    /// HLS output.
    ProgramDateTimeIntervalSeconds: Int?
    /// When enabled, an I-Frame only stream will be included in the output.
    IncludeIframeOnlyStream: Boolean?
    /// A list of SCTE-35 message types that are treated as ad markers in the
    /// output.  If empty, no ad markers are output.  Specify multiple items
    /// to create ad markers for all of the included message types.
    AdTriggers: Listing<"SPLICE_INSERT" | "BREAK" | "PROVIDER_ADVERTISEMENT" | "DISTRIBUTOR_ADVERTISEMENT" | "PROVIDER_PLACEMENT_OPPORTUNITY" | "DISTRIBUTOR_PLACEMENT_OPPORTUNITY" | "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY" | "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY">?
    AdsOnDeliveryRestrictions: "NONE" | "RESTRICTED" | "UNRESTRICTED" | "BOTH" | *Null
}
class Tag {
    Key: String
    Value: String
}
