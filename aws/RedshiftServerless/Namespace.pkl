/// Definition of AWS::RedshiftServerless::Namespace Resource Type
extends ".../AWS/Resource.pkl"
Type = "AWS::RedshiftServerless::Namespace"
Properties: Props?
class Props {
    /// The ID of the AWS Key Management Service (KMS) key used to encrypt and
    /// store the namespace's admin credentials secret. You can only use this
    /// parameter if manageAdminPassword is true.
    AdminPasswordSecretKmsKeyId: String?
    /// The password associated with the admin user for the namespace that is
    /// being created. Password must be at least 8 characters in length,
    /// should be any printable ASCII character. Must contain at least one
    /// lowercase letter, one uppercase letter and one decimal digit. You
    /// can't use adminUserPassword if manageAdminPassword is true.
    AdminUserPassword: String(length <= 64 && length >= 8 && matches(Regex(#"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+"#)))?
    /// The user name associated with the admin user for the namespace that is
    /// being created. Only alphanumeric characters and underscores are
    /// allowed. It should start with an alphabet.
    AdminUsername: String(matches(Regex(#"[a-zA-Z][a-zA-Z_0-9+.@-]*"#)))?
    /// The database name associated for the namespace that is being created.
    /// Only alphanumeric characters and underscores are allowed. It should
    /// start with an alphabet.
    DbName: String(length <= 127 && matches(Regex(#"[a-zA-Z][a-zA-Z_0-9+.@-]*"#)))?
    /// The default IAM role ARN for the namespace that is being created.
    DefaultIamRoleArn: String?
    /// A list of AWS Identity and Access Management (IAM) roles that can be
    /// used by the namespace to access other AWS services. You must supply
    /// the IAM roles in their Amazon Resource Name (ARN) format. The Default
    /// role limit for each request is 10.
    IamRoles: Listing<String(length <= 512 && length >= 0)>?
    /// The AWS Key Management Service (KMS) key ID of the encryption key that
    /// you want to use to encrypt data in the namespace.
    KmsKeyId: String?
    /// The collection of log types to be exported provided by the customer.
    /// Should only be one of the three supported log types: userlog,
    /// useractivitylog and connectionlog
    LogExports: Listing<"useractivitylog" | "userlog" | "connectionlog">?
    /// If true, Amazon Redshift uses AWS Secrets Manager to manage the
    /// namespace's admin credentials. You can't use adminUserPassword if
    /// manageAdminPassword is true. If manageAdminPassword is false or not
    /// set, Amazon Redshift uses adminUserPassword for the admin user
    /// account's password.
    ManageAdminPassword: Boolean?
    /// Definition of Namespace resource.
    Namespace: Namespace?
    /// A unique identifier for the namespace. You use this identifier to
    /// refer to the namespace for any subsequent namespace operations such as
    /// deleting or modifying. All alphabetical characters must be lower case.
    /// Namespace name should be unique for all namespaces within an AWS
    /// account.
    NamespaceName: String(length <= 64 && length >= 3 && matches(Regex(#"^[a-z0-9-]+$"#)))?
    /// The list of tags for the namespace.
    Tags: Listing<Tag>?
    /// The name of the namespace the source snapshot was created from. Please
    /// specify the name if needed before deleting namespace
    FinalSnapshotName: String(length <= 255 && matches(Regex(#"[a-z][a-z0-9]*(-[a-z0-9]+)*"#)))?
    /// The number of days to retain automated snapshot in the destination
    /// region after they are copied from the source region. If the value is
    /// -1, the manual snapshot is retained indefinitely. The value must be
    /// either -1 or an integer between 1 and 3,653.
    FinalSnapshotRetentionPeriod: Int?
    /// The resource policy document that will be attached to the namespace.
    NamespaceResourcePolicy: Mapping?
    /// The ARN for the Redshift application that integrates with IAM Identity
    /// Center.
    RedshiftIdcApplicationArn: String?
}
class Namespace {
    NamespaceArn: String?
    NamespaceId: String?
    NamespaceName: String(length <= 64 && length >= 3 && matches(Regex(#"^[a-z0-9-]+$"#)))?
    AdminUsername: String?
    DbName: String(matches(Regex(#"[a-zA-Z][a-zA-Z_0-9+.@-]*"#)))?
    KmsKeyId: String?
    DefaultIamRoleArn: String?
    IamRoles: Listing<String(length <= 512 && length >= 0)>?
    LogExports: Listing<"useractivitylog" | "userlog" | "connectionlog">?
    Status: "AVAILABLE" | "MODIFYING" | "DELETING" | *Null
    CreationDate: String?
    AdminPasswordSecretArn: String?
    AdminPasswordSecretKmsKeyId: String?
}
class Tag {
    Key: String(length <= 128 && length >= 1)
    Value: String(length <= 256 && length >= 0)
}
