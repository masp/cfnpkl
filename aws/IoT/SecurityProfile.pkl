/// A security profile defines a set of expected behaviors for devices in
/// your account.
extends ".../AWS/Resource.pkl"
Type = "AWS::IoT::SecurityProfile"
Properties: Props?
class Props {
    /// A unique identifier for the security profile.
    SecurityProfileName: String(length <= 128 && length >= 1 && matches(Regex(#"[a-zA-Z0-9:_-]+"#)))?
    /// A description of the security profile.
    SecurityProfileDescription: String(length <= 1000)?
    /// Specifies the behaviors that, when violated by a device (thing), cause
    /// an alert.
    Behaviors: Listing<Behavior>?
    /// Specifies the destinations to which alerts are sent.
    AlertTargets: Mapping?
    /// A list of metrics whose data is retained (stored). By default, data is
    /// retained for any metric used in the profile's behaviors, but it is
    /// also retained for any metric specified here.
    AdditionalMetricsToRetainV2: Listing<MetricToRetain>?
    /// A structure containing the mqtt topic for metrics export.
    MetricsExportConfig: MetricsExportConfig?
    /// Metadata that can be used to manage the security profile.
    Tags: Listing<Tag>?
    /// A set of target ARNs that the security profile is attached to.
    TargetArns: Listing<String(length <= 2048)>?
    /// The ARN (Amazon resource name) of the created security profile.
    SecurityProfileArn: String?
}
/// A security profile behavior.
class Behavior {
    /// The name for the behavior.
    Name: String(length <= 128 && length >= 1 && matches(Regex(#"[a-zA-Z0-9:_-]+"#)))
    /// What is measured by the behavior.
    Metric: String(length <= 128 && length >= 1 && matches(Regex(#"[a-zA-Z0-9:_-]+"#)))?
    MetricDimension: MetricDimension?
    Criteria: BehaviorCriteria?
    /// Manage Detect alarm SNS notifications by setting behavior notification
    /// to on or suppressed. Detect will continue to performing device
    /// behavior evaluations. However, suppressed alarms wouldn't be forwarded
    /// for SNS notification.
    SuppressAlerts: Boolean?
    ExportMetric: Boolean?
}
/// The dimension of a metric.
class MetricDimension {
    /// A unique identifier for the dimension.
    DimensionName: String(length <= 128 && length >= 1 && matches(Regex(#"[a-zA-Z0-9:_-]+"#)))
    /// Defines how the dimensionValues of a dimension are interpreted.
    Operator: "IN" | "NOT_IN" | *Null
}
/// The criteria by which the behavior is determined to be normal.
class BehaviorCriteria {
    /// The operator that relates the thing measured (metric) to the criteria
    /// (containing a value or statisticalThreshold).
    ComparisonOperator: "less-than" | "less-than-equals" | "greater-than" | "greater-than-equals" | "in-cidr-set" | "not-in-cidr-set" | "in-port-set" | "not-in-port-set" | "in-set" | "not-in-set" | *Null
    Value: MetricValue?
    /// Use this to specify the time duration over which the behavior is
    /// evaluated.
    DurationSeconds: Int?
    /// If a device is in violation of the behavior for the specified number
    /// of consecutive datapoints, an alarm occurs. If not specified, the
    /// default is 1.
    ConsecutiveDatapointsToAlarm: Int?
    /// If an alarm has occurred and the offending device is no longer in
    /// violation of the behavior for the specified number of consecutive
    /// datapoints, the alarm is cleared. If not specified, the default is 1.
    ConsecutiveDatapointsToClear: Int?
    StatisticalThreshold: StatisticalThreshold?
    MlDetectionConfig: MachineLearningDetectionConfig?
}
/// The value to be compared with the metric.
class MetricValue {
    /// If the ComparisonOperator calls for a numeric value, use this to
    /// specify that (integer) numeric value to be compared with the metric.
    Count: String?
    /// If the ComparisonOperator calls for a set of CIDRs, use this to
    /// specify that set to be compared with the metric.
    Cidrs: Listing<String>?
    /// If the ComparisonOperator calls for a set of ports, use this to
    /// specify that set to be compared with the metric.
    Ports: Listing<Int>?
    /// The numeral value of a metric.
    Number: Float?
    /// The numeral values of a metric.
    Numbers: Listing<Float>?
    /// The string values of a metric.
    Strings: Listing<String>?
}
/// A statistical ranking (percentile) which indicates a threshold value
/// by which a behavior is determined to be in compliance or in violation
/// of the behavior.
class StatisticalThreshold {
    /// The percentile which resolves to a threshold value by which compliance
    /// with a behavior is determined
    Statistic: "Average" | "p0" | "p0.1" | "p0.01" | "p1" | "p10" | "p50" | "p90" | "p99" | "p99.9" | "p99.99" | "p100" | *Null
}
/// The configuration of an ML Detect Security Profile.
class MachineLearningDetectionConfig {
    /// The sensitivity of anomalous behavior evaluation. Can be Low, Medium,
    /// or High.
    ConfidenceLevel: "LOW" | "MEDIUM" | "HIGH" | *Null
}
/// The metric you want to retain. Dimensions are optional.
class MetricToRetain {
    /// What is measured by the behavior.
    Metric: String(length <= 128 && length >= 1 && matches(Regex(#"[a-zA-Z0-9:_-]+"#)))
    MetricDimension: MetricDimension?
    ExportMetric: Boolean?
}
/// A structure containing the mqtt topic for metrics export.
class MetricsExportConfig {
    /// The topic for metrics export.
    MqttTopic: String(length <= 512 && length >= 1)
    /// The ARN of the role that grants permission to publish to mqtt topic.
    RoleArn: String(length <= 2048 && length >= 20)
}
/// A key-value pair to associate with a resource.
class Tag {
    /// The tag's key.
    Key: String(length <= 128 && length >= 1)
    /// The tag's value.
    Value: String(length <= 256 && length >= 1)
}
