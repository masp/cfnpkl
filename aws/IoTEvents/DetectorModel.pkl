/// The AWS::IoTEvents::DetectorModel resource creates a detector model.
/// You create a *detector model* (a model of your equipment or process)
/// using *states*. For each state, you define conditional (Boolean) logic
/// that evaluates the incoming inputs to detect significant events. When
/// an event is detected, it can change the state or trigger custom-built
/// or predefined actions using other AWS services. You can define
/// additional events that trigger actions when entering or exiting a
/// state and, optionally, when a condition is met. For more information,
/// see [How to Use AWS IoT Events](https://docs.aws.amazon.com/iotevents/
/// latest/developerguide/how-to-use-iotevents.html) in the *AWS IoT
/// Events Developer Guide*.
extends ".../AWS/Resource.pkl"
Type = "AWS::IoTEvents::DetectorModel"
Properties: Props?
class Props {
    DetectorModelDefinition: DetectorModelDefinition?
    /// A brief description of the detector model.
    DetectorModelDescription: String(length <= 128)?
    /// The name of the detector model.
    DetectorModelName: String(length <= 128 && length >= 1 && matches(Regex(#"^[a-zA-Z0-9_-]+$"#)))?
    /// Information about the order in which events are evaluated and how
    /// actions are executed.
    EvaluationMethod: "BATCH" | "SERIAL" | *Null
    /// The value used to identify a detector instance. When a device or
    /// system sends input, a new detector instance with a unique key value is
    /// created. AWS IoT Events can continue to route input to its
    /// corresponding detector instance based on this identifying information.
    /// This parameter uses a JSON-path expression to select the attribute-
    /// value pair in the message payload that is used for identification. To
    /// route the message to the correct detector instance, the device must
    /// send a message payload that contains the same attribute-value.
    Key: String(length <= 128 && length >= 1 && matches(Regex(#"^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$"#)))?
    /// The ARN of the role that grants permission to AWS IoT Events to
    /// perform its operations.
    RoleArn: String(length <= 2048 && length >= 1)?
    /// An array of key-value pairs to apply to this resource.  For more
    /// information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/l
    /// atest/UserGuide/aws-properties-resource-tags.html).
    Tags: Listing<Tag>?
}
/// Information that defines how a detector operates.
class DetectorModelDefinition {
    /// The state that is entered at the creation of each detector (instance).
    InitialStateName: String(length <= 128 && length >= 1)
    /// Information about the states of the detector.
    States: Listing<State>
}
/// Information that defines a state of a detector.
class State {
    OnEnter: OnEnter?
    OnExit: OnExit?
    OnInput: OnInput?
    /// The name of the state.
    StateName: String(length <= 128 && length >= 1)
}
/// When entering this state, perform these `actions` if the `condition`
/// is `TRUE`.
class OnEnter {
    /// Specifies the `actions` that are performed when the state is entered
    /// and the `condition` is `TRUE`.
    Events: Listing<Event>?
}
/// Specifies the `actions` to be performed when the `condition` evaluates
/// to `TRUE`.
class Event {
    /// The actions to be performed.
    Actions: Listing<Action>?
    /// The Boolean expression that, when `TRUE`, causes the `actions` to be
    /// performed. If not present, the `actions` are performed (=`TRUE`). If
    /// the expression result is not a `Boolean` value, the `actions` are not
    /// performed (=`FALSE`).
    Condition: String(length <= 512)?
    /// The name of the event.
    EventName: String(length <= 128)
}
/// The actions to be performed.
class Action {
    ClearTimer: ClearTimer?
    DynamoDB: DynamoDB?
    DynamoDBv2: DynamoDBv2?
    Firehose: Firehose?
    IotEvents: IotEvents?
    IotSiteWise: IotSiteWise?
    IotTopicPublish: IotTopicPublish?
    Lambda: Lambda?
    ResetTimer: ResetTimer?
    SetTimer: SetTimer?
    SetVariable: SetVariable?
    Sns: Sns?
    Sqs: Sqs?
}
/// Information needed to clear the timer.
class ClearTimer {
    TimerName: String(length <= 128 && length >= 1)
}
/// Writes to the DynamoDB table that you created. The default action
/// payload contains all attribute-value pairs that have the information
/// about the detector model instance and the event that triggered the
/// action. You can also customize the [payload](https://docs.aws.amazon.c
/// om/iotevents/latest/apireference/API_Payload.html). One column of the
/// DynamoDB table receives all attribute-value pairs in the payload that
/// you specify. For more information, see [Actions](https://docs.aws.amaz
/// on.com/iotevents/latest/developerguide/iotevents-event-actions.html)
/// in *AWS IoT Events Developer Guide*.
class DynamoDB {
    /// The name of the hash key (also called the partition key).
    HashKeyField: String
    /// The data type for the hash key (also called the partition key). You
    /// can specify the following values:  * `STRING` - The hash key is a
    /// string.  * `NUMBER` - The hash key is a number.  If you don't specify
    /// `hashKeyType`, the default value is `STRING`.
    HashKeyType: String?
    /// The value of the hash key (also called the partition key).
    HashKeyValue: String
    /// The type of operation to perform. You can specify the following
    /// values:  * `INSERT` - Insert data as a new item into the DynamoDB
    /// table. This item uses the specified hash key as a partition key. If
    /// you specified a range key, the item uses the range key as a sort key.
    /// * `UPDATE` - Update an existing item of the DynamoDB table with new
    /// data. This item's partition key must match the specified hash key. If
    /// you specified a range key, the range key must match the item's sort
    /// key.  * `DELETE` - Delete an existing item of the DynamoDB table. This
    /// item's partition key must match the specified hash key. If you
    /// specified a range key, the range key must match the item's sort key.
    /// If you don't specify this parameter, AWS IoT Events triggers the
    /// `INSERT` operation.
    Operation: String?
    Payload: Payload?
    /// The name of the DynamoDB column that receives the action payload.  If
    /// you don't specify this parameter, the name of the DynamoDB column is
    /// `payload`.
    PayloadField: String?
    /// The name of the range key (also called the sort key).
    RangeKeyField: String?
    /// The data type for the range key (also called the sort key), You can
    /// specify the following values:  * `STRING` - The range key is a string.
    /// * `NUMBER` - The range key is number.  If you don't specify
    /// `rangeKeyField`, the default value is `STRING`.
    RangeKeyType: String?
    /// The value of the range key (also called the sort key).
    RangeKeyValue: String?
    /// The name of the DynamoDB table.
    TableName: String
}
/// Information needed to configure the payload.  By default, AWS IoT
/// Events generates a standard payload in JSON for any action. This
/// action payload contains all attribute-value pairs that have the
/// information about the detector model instance and the event triggered
/// the action. To configure the action payload, you can use
/// `contentExpression`.
class Payload {
    /// The content of the payload. You can use a string expression that
    /// includes quoted strings (`'<string>'`), variables
    /// (`$variable.<variable-name>`), input values (`$input.<input-
    /// name>.<path-to-datum>`), string concatenations, and quoted strings
    /// that contain `${}` as the content. The recommended maximum size of a
    /// content expression is 1 KB.
    ContentExpression: String(length >= 1)
    /// The value of the payload type can be either `STRING` or `JSON`.
    Type: String
}
/// Defines an action to write to the Amazon DynamoDB table that you
/// created. The default action payload contains all attribute-value pairs
/// that have the information about the detector model instance and the
/// event that triggered the action. You can also customize the [payload](
/// https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.
/// html). A separate column of the DynamoDB table receives one attribute-
/// value pair in the payload that you specify.  You can use expressions
/// for parameters that are strings. For more information, see [Expression
/// s](https://docs.aws.amazon.com/iotevents/latest/developerguide/ioteven
/// ts-expressions.html) in the *AWS IoT Events Developer Guide*.
class DynamoDBv2 {
    Payload: Payload?
    /// The name of the DynamoDB table.
    TableName: String
}
/// Sends information about the detector model instance and the event that
/// triggered the action to an Amazon Kinesis Data Firehose delivery
/// stream.
class Firehose {
    /// The name of the Kinesis Data Firehose delivery stream where the data
    /// is written.
    DeliveryStreamName: String
    Payload: Payload?
    /// A character separator that is used to separate records written to the
    /// Kinesis Data Firehose delivery stream. Valid values are: '\n'
    /// (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
    Separator: String(matches(Regex(#"([\n\t])|(\r\n)|(,)"#)))?
}
/// Sends an AWS IoT Events input, passing in information about the
/// detector model instance and the event that triggered the action.
class IotEvents {
    /// The name of the AWS IoT Events input where the data is sent.
    InputName: String(length <= 128 && length >= 1 && matches(Regex(#"^[a-zA-Z][a-zA-Z0-9_]*$"#)))
    Payload: Payload?
}
/// Sends information about the detector model instance and the event that
/// triggered the action to a specified asset property in AWS IoT
/// SiteWise.
class IotSiteWise {
    /// The ID of the asset that has the specified property. You can specify
    /// an expression.
    AssetId: String?
    /// A unique identifier for this entry. You can use the entry ID to track
    /// which data entry causes an error in case of failure. The default is a
    /// new unique identifier. You can also specify an expression.
    EntryId: String?
    /// The alias of the asset property. You can also specify an expression.
    PropertyAlias: String?
    /// The ID of the asset property. You can specify an expression.
    PropertyId: String?
    PropertyValue: AssetPropertyValue
}
/// A structure that contains value information. For more information, see
/// [AssetPropertyValue](https://docs.aws.amazon.com/iot-
/// sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS
/// IoT SiteWise API Reference*.
class AssetPropertyValue {
    /// The quality of the asset property value. The value must be `GOOD`,
    /// `BAD`, or `UNCERTAIN`. You can also specify an expression.
    Quality: String?
    Timestamp: AssetPropertyTimestamp?
    Value: AssetPropertyVariant
}
/// A structure that contains timestamp information. For more information,
/// see [TimeInNanos](https://docs.aws.amazon.com/iot-
/// sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT
/// SiteWise API Reference*.
class AssetPropertyTimestamp {
    /// The timestamp, in seconds, in the Unix epoch format. The valid range
    /// is between `1-31556889864403199`. You can also specify an expression.
    OffsetInNanos: String?
    /// The nanosecond offset converted from `timeInSeconds`. The valid range
    /// is between `0-999999999`. You can also specify an expression.
    TimeInSeconds: String
}
/// A structure that contains an asset property value. For more
/// information, see [Variant](https://docs.aws.amazon.com/iot-
/// sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT
/// SiteWise API Reference*.
class AssetPropertyVariant {
    /// The asset property value is a Boolean value that must be `TRUE` or
    /// `FALSE`. You can also specify an expression. If you use an expression,
    /// the evaluated result should be a Boolean value.
    BooleanValue: String?
    /// The asset property value is a double. You can also specify an
    /// expression. If you use an expression, the evaluated result should be a
    /// double.
    DoubleValue: String?
    /// The asset property value is an integer. You can also specify an
    /// expression. If you use an expression, the evaluated result should be
    /// an integer.
    IntegerValue: String?
    /// The asset property value is a string. You can also specify an
    /// expression. If you use an expression, the evaluated result should be a
    /// string.
    StringValue: String?
}
/// Information required to publish the MQTT message through the AWS IoT
/// message broker.
class IotTopicPublish {
    /// The MQTT topic of the message. You can use a string expression that
    /// includes variables (`$variable.<variable-name>`) and input values
    /// (`$input.<input-name>.<path-to-datum>`) as the topic string.
    MqttTopic: String(length <= 128 && length >= 1)
    Payload: Payload?
}
class Lambda {
    /// The ARN of the Lambda function that is executed.
    FunctionArn: String(length <= 2048 && length >= 1)
    Payload: Payload?
}
/// Information required to reset the timer. The timer is reset to the
/// previously evaluated result of the duration. The duration expression
/// isn't reevaluated when you reset the timer.
class ResetTimer {
    /// The name of the timer to reset.
    TimerName: String(length <= 128 && length >= 1)
}
/// Information needed to set the timer.
class SetTimer {
    /// The duration of the timer, in seconds. You can use a string expression
    /// that includes numbers, variables (`$variable.<variable-name>`), and
    /// input values (`$input.<input-name>.<path-to-datum>`) as the duration.
    /// The range of the duration is `1-31622400` seconds. To ensure accuracy,
    /// the minimum duration is `60` seconds. The evaluated result of the
    /// duration is rounded down to the nearest whole number.
    DurationExpression: String(length <= 1024 && length >= 1)?
    /// The number of seconds until the timer expires. The minimum value is
    /// `60` seconds to ensure accuracy. The maximum value is `31622400`
    /// seconds.
    Seconds: Int?
    /// The name of the timer.
    TimerName: String(length <= 128 && length >= 1)
}
/// Information about the variable and its new value.
class SetVariable {
    /// The new value of the variable.
    Value: String(length <= 1024 && length >= 1)
    /// The name of the variable.
    VariableName: String(length <= 128 && length >= 1 && matches(Regex(#"^[a-zA-Z][a-zA-Z0-9_]*$"#)))
}
/// Information required to publish the Amazon SNS message.
class Sns {
    Payload: Payload?
    /// The ARN of the Amazon SNS target where the message is sent.
    TargetArn: String(length <= 2048 && length >= 1)
}
class Sqs {
    Payload: Payload?
    /// The URL of the SQS queue where the data is written.
    QueueUrl: String
    /// Set this to `TRUE` if you want the data to be base-64 encoded before
    /// it is written to the queue. Otherwise, set this to `FALSE`.
    UseBase64: Boolean?
}
/// When exiting this state, perform these `actions` if the specified
/// `condition` is `TRUE`.
class OnExit {
    /// Specifies the `actions` that are performed when the state is exited
    /// and the `condition` is `TRUE`.
    Events: Listing<Event>?
}
/// When an input is received and the `condition` is `TRUE`, perform the
/// specified `actions`.
class OnInput {
    /// Specifies the `actions` performed when the `condition` evaluates to
    /// `TRUE`.
    Events: Listing<Event>?
    /// Specifies the `actions` performed, and the next `state` entered, when
    /// a `condition` evaluates to `TRUE`.
    TransitionEvents: Listing<TransitionEvent>?
}
/// Specifies the `actions `performed and the next `state` entered when a
/// `condition` evaluates to `TRUE`.
class TransitionEvent {
    /// The actions to be performed.
    Actions: Listing<Action>?
    /// A Boolean expression that when `TRUE` causes the `actions` to be
    /// performed and the `nextState` to be entered.
    Condition: String(length <= 512)
    /// The name of the event.
    EventName: String(length <= 128 && length >= 1)
    /// The next state to enter.
    NextState: String(length <= 128 && length >= 1)
}
/// Tags to be applied to Input.
class Tag {
    /// Key of the Tag.
    Key: String
    /// Value of the Tag.
    Value: String
}
