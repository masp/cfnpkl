/// The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon
/// GameLift (GameLift) matchmaking configuration.
extends ".../AWS/Resource.pkl"
Type = "AWS::GameLift::MatchmakingConfiguration"
Properties: Props?
class Props {
    /// A flag that indicates whether a match that was created with this
    /// configuration must be accepted by the matched players
    AcceptanceRequired: Boolean?
    /// The length of time (in seconds) to wait for players to accept a
    /// proposed match, if acceptance is required.
    AcceptanceTimeoutSeconds: Int?
    /// The number of player slots in a match to keep open for future players.
    AdditionalPlayerCount: Int?
    /// The method used to backfill game sessions created with this
    /// matchmaking configuration.
    BackfillMode: "AUTOMATIC" | "MANUAL" | *Null
    /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift
    /// matchmaking configuration resource and uniquely identifies it.
    Arn: String(matches(Regex(#"^arn:.*:matchmakingconfiguration\/[a-zA-Z0-9-\.]*"#)))?
    /// A time stamp indicating when this data object was created.
    CreationTime: String?
    /// Information to attach to all events related to the matchmaking
    /// configuration.
    CustomEventData: String(length <= 256 && length >= 0)?
    /// A descriptive label that is associated with matchmaking configuration.
    Description: String(length <= 1024 && length >= 1)?
    /// Indicates whether this matchmaking configuration is being used with
    /// Amazon GameLift hosting or as a standalone matchmaking solution.
    FlexMatchMode: "STANDALONE" | "WITH_QUEUE" | *Null
    /// A set of custom properties for a game session, formatted as key:value
    /// pairs.
    GameProperties: Listing<GameProperty>?
    /// A set of custom game session properties, formatted as a single string
    /// value.
    GameSessionData: String(length <= 4096 && length >= 1)?
    /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift
    /// game session queue resource and uniquely identifies it.
    GameSessionQueueArns: Listing<String(length <= 256 && length >= 1 && matches(Regex(#"[a-zA-Z0-9:/-]+"#)))>?
    /// A unique identifier for the matchmaking configuration.
    Name: String(length <= 128 && matches(Regex(#"[a-zA-Z0-9-\.]*"#)))?
    /// An SNS topic ARN that is set up to receive matchmaking notifications.
    NotificationTarget: String(length <= 300 && length >= 0 && matches(Regex(#"[a-zA-Z0-9:_/-]*(.fifo)?"#)))?
    /// The maximum duration, in seconds, that a matchmaking ticket can remain
    /// in process before timing out.
    RequestTimeoutSeconds: Int?
    /// The Amazon Resource Name (ARN) associated with the GameLift
    /// matchmaking rule set resource that this configuration uses.
    RuleSetArn: String(matches(Regex(#"^arn:.*:matchmakingruleset\/[a-zA-Z0-9-\.]*"#)))?
    /// A unique identifier for the matchmaking rule set to use with this
    /// configuration.
    RuleSetName: String(length <= 128 && matches(Regex(#"[a-zA-Z0-9-\.]*"#)))?
    /// An array of key-value pairs to apply to this resource.
    Tags: Listing<Tag>?
}
/// A key-value pair that contains information about a game session.
class GameProperty {
    /// The game property identifier.
    Key: String(length <= 32)
    /// The game property value.
    Value: String(length <= 96)
}
/// A key-value pair to associate with a resource.
class Tag {
    /// The key name of the tag. You can specify a value that is 1 to 128
    /// Unicode characters in length.
    Key: String(length <= 128 && length >= 1)
    /// The value for the tag. You can specify a value that is 0 to 256
    /// Unicode characters in length.
    Value: String(length <= 256 && length >= 0)
}
