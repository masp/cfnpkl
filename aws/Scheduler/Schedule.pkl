/// Definition of AWS::Scheduler::Schedule Resource Type
extends ".../AWS/Resource.pkl"
Type = "AWS::Scheduler::Schedule"
Properties: Props?
class Props {
    /// The Amazon Resource Name (ARN) of the schedule.
    Arn: String(length <= 1224 && length >= 1 && matches(Regex(#"^arn:aws(-[a-z]+)?:scheduler:[a-z0-9\-]+:\d{12}:schedule\/[0-9a-zA-Z-_.]+\/[0-9a-zA-Z-_.]+$"#)))?
    /// The description of the schedule.
    Description: String(length <= 512 && length >= 0)?
    /// The date, in UTC, before which the schedule can invoke its target.
    /// Depending on the schedule's recurrence expression, invocations might
    /// stop on, or before, the EndDate you specify.
    EndDate: String?
    FlexibleTimeWindow: FlexibleTimeWindow?
    /// The name of the schedule group to associate with this schedule. If you
    /// omit this, the default schedule group is used.
    GroupName: String(length <= 64 && length >= 1 && matches(Regex(#"^[0-9a-zA-Z-_.]+$"#)))?
    /// The ARN for a KMS Key that will be used to encrypt customer data.
    KmsKeyArn: String(length <= 2048 && length >= 1 && matches(Regex(#"^arn:aws(-[a-z]+)?:kms:[a-z0-9\-]+:\d{12}:(key|alias)\/[0-9a-zA-Z-_]*$"#)))?
    Name: String(length <= 64 && length >= 1 && matches(Regex(#"^[0-9a-zA-Z-_.]+$"#)))?
    /// The scheduling expression.
    ScheduleExpression: String(length <= 256 && length >= 1)?
    /// The timezone in which the scheduling expression is evaluated.
    ScheduleExpressionTimezone: String(length <= 50 && length >= 1)?
    /// The date, in UTC, after which the schedule can begin invoking its
    /// target. Depending on the schedule's recurrence expression, invocations
    /// might occur on, or after, the StartDate you specify.
    StartDate: String?
    State: "ENABLED" | "DISABLED" | *Null
    Target: Target?
}
/// Flexible time window allows configuration of a window within which a
/// schedule can be invoked
class FlexibleTimeWindow {
    Mode: "OFF" | "FLEXIBLE"
    /// The maximum time window during which a schedule can be invoked.
    MaximumWindowInMinutes: Float?
}
/// The schedule target.
class Target {
    /// The Amazon Resource Name (ARN) of the target.
    Arn: String(length <= 1600 && length >= 1)
    /// The Amazon Resource Name (ARN) of the IAM role to be used for this
    /// target when the schedule is triggered.
    RoleArn: String(length <= 1600 && length >= 1 && matches(Regex(#"^arn:aws(-[a-z]+)?:iam::\d{12}:role\/[\w+=,.@\/-]+$"#)))
    DeadLetterConfig: DeadLetterConfig?
    RetryPolicy: RetryPolicy?
    /// The text, or well-formed JSON, passed to the target. If you are
    /// configuring a templated Lambda, AWS Step Functions, or Amazon
    /// EventBridge target, the input must be a well-formed JSON. For all
    /// other target types, a JSON is not required. If you do not specify
    /// anything for this field, EventBridge Scheduler delivers a default
    /// notification to the target.
    Input: String(length >= 1)?
    EcsParameters: EcsParameters?
    EventBridgeParameters: EventBridgeParameters?
    KinesisParameters: KinesisParameters?
    SageMakerPipelineParameters: SageMakerPipelineParameters?
    SqsParameters: SqsParameters?
}
/// A DeadLetterConfig object that contains information about a dead-
/// letter queue configuration.
class DeadLetterConfig {
    /// The ARN of the SQS queue specified as the target for the dead-letter
    /// queue.
    Arn: String(length <= 1600 && length >= 1 && matches(Regex(#"^arn:aws(-[a-z]+)?:sqs:[a-z0-9\-]+:\d{12}:[a-zA-Z0-9\-_]+$"#)))?
}
/// A RetryPolicy object that includes information about the retry policy
/// settings.
class RetryPolicy {
    /// The maximum amount of time, in seconds, to continue to make retry
    /// attempts.
    MaximumEventAgeInSeconds: Float?
    /// The maximum number of retry attempts to make before the request fails.
    /// Retry attempts with exponential backoff continue until either the
    /// maximum number of attempts is made or until the duration of the
    /// MaximumEventAgeInSeconds is reached.
    MaximumRetryAttempts: Float?
}
/// The custom parameters to be used when the target is an Amazon ECS
/// task.
class EcsParameters {
    /// The ARN of the task definition to use if the event target is an Amazon
    /// ECS task.
    TaskDefinitionArn: String(length <= 1600 && length >= 1)
    /// The number of tasks to create based on TaskDefinition. The default is
    /// 1.
    TaskCount: Float?
    LaunchType: "EC2" | "FARGATE" | "EXTERNAL" | *Null
    NetworkConfiguration: NetworkConfiguration?
    /// Specifies the platform version for the task. Specify only the numeric
    /// portion of the platform version, such as 1.1.0.
    PlatformVersion: String(length <= 64 && length >= 1)?
    /// Specifies an ECS task group for the task. The maximum length is 255
    /// characters.
    Group: String(length <= 255 && length >= 1)?
    /// The capacity provider strategy to use for the task.
    CapacityProviderStrategy: Listing<CapacityProviderStrategyItem>?
    /// Specifies whether to enable Amazon ECS managed tags for the task. For
    /// more information, see Tagging Your Amazon ECS Resources in the Amazon
    /// Elastic Container Service Developer Guide.
    EnableECSManagedTags: Boolean?
    /// Whether or not to enable the execute command functionality for the
    /// containers in this task. If true, this enables execute command
    /// functionality on all containers in the task.
    EnableExecuteCommand: Boolean?
    /// An array of placement constraint objects to use for the task. You can
    /// specify up to 10 constraints per task (including constraints in the
    /// task definition and those specified at runtime).
    PlacementConstraints: Listing<PlacementConstraint>?
    /// The placement strategy objects to use for the task. You can specify a
    /// maximum of five strategy rules per task.
    PlacementStrategy: Listing<PlacementStrategy>?
    PropagateTags: "TASK_DEFINITION" | *Null
    /// The reference ID to use for the task.
    ReferenceId: String(length <= 1024)?
    /// The metadata that you apply to the task to help you categorize and
    /// organize them. Each tag consists of a key and an optional value, both
    /// of which you define. To learn more, see RunTask in the Amazon ECS API
    /// Reference.
    Tags: Listing<Mapping>?
}
/// This structure specifies the network configuration for an ECS task.
class NetworkConfiguration {
    AwsvpcConfiguration: AwsVpcConfiguration?
}
/// This structure specifies the VPC subnets and security groups for the
/// task, and whether a public IP address is to be used. This structure is
/// relevant only for ECS tasks that use the awsvpc network mode.
class AwsVpcConfiguration {
    /// Specifies the subnets associated with the task. These subnets must all
    /// be in the same VPC. You can specify as many as 16 subnets.
    Subnets: Listing<String(length <= 1000 && length >= 1)>
    /// Specifies the security groups associated with the task. These security
    /// groups must all be in the same VPC. You can specify as many as five
    /// security groups. If you do not specify a security group, the default
    /// security group for the VPC is used.
    SecurityGroups: Listing<String(length <= 1000 && length >= 1)>?
    AssignPublicIp: "ENABLED" | "DISABLED" | *Null
}
/// The details of a capacity provider strategy.
class CapacityProviderStrategyItem {
    /// The short name of the capacity provider.
    CapacityProvider: String(length <= 255 && length >= 1)
    /// The weight value designates the relative percentage of the total
    /// number of tasks launched that should use the specified capacity
    /// provider. The weight value is taken into consideration after the base
    /// value, if defined, is satisfied.
    Weight: Float?
    /// The base value designates how many tasks, at a minimum, to run on the
    /// specified capacity provider. Only one capacity provider in a capacity
    /// provider strategy can have a base defined. If no value is specified,
    /// the default value of 0 is used.
    Base: Float?
}
/// An object representing a constraint on task placement.
class PlacementConstraint {
    Type: "distinctInstance" | "memberOf" | *Null
    /// A cluster query language expression to apply to the constraint. You
    /// cannot specify an expression if the constraint type is
    /// distinctInstance. To learn more, see Cluster Query Language in the
    /// Amazon Elastic Container Service Developer Guide.
    Expression: String(length <= 2000)?
}
/// The task placement strategy for a task or service.
class PlacementStrategy {
    Type: "random" | "spread" | "binpack" | *Null
    /// The field to apply the placement strategy against. For the spread
    /// placement strategy, valid values are instanceId (or host, which has
    /// the same effect), or any platform or custom attribute that is applied
    /// to a container instance, such as attribute:ecs.availability-zone. For
    /// the binpack placement strategy, valid values are cpu and memory. For
    /// the random placement strategy, this field is not used.
    Field: String(length <= 255)?
}
/// EventBridge PutEvent predefined target type.
class EventBridgeParameters {
    /// Free-form string, with a maximum of 128 characters, used to decide
    /// what fields to expect in the event detail.
    DetailType: String(length <= 128 && length >= 1)
    /// The source of the event.
    Source: String(length <= 256 && length >= 1 && matches(Regex(#"^(?=[/\.\-_A-Za-z0-9]+)((?!aws\.).*)|(\$(\.[\w_-]+(\[(\d+|\*)\])*)*)$"#)))
}
/// The custom parameter you can use to control the shard to which
/// EventBridge Scheduler sends the event.
class KinesisParameters {
    /// The custom parameter used as the Kinesis partition key. For more
    /// information, see Amazon Kinesis Streams Key Concepts in the Amazon
    /// Kinesis Streams Developer Guide.
    PartitionKey: String(length <= 256 && length >= 1)
}
/// These are custom parameters to use when the target is a SageMaker
/// Model Building Pipeline that starts based on AWS EventBridge Scheduler
/// schedules.
class SageMakerPipelineParameters {
    /// List of Parameter names and values for SageMaker Model Building
    /// Pipeline execution.
    PipelineParameterList: Listing<SageMakerPipelineParameter>?
}
/// Name/Value pair of a parameter to start execution of a SageMaker Model
/// Building Pipeline.
class SageMakerPipelineParameter {
    /// Name of parameter to start execution of a SageMaker Model Building
    /// Pipeline.
    Name: String(length <= 256 && length >= 1 && matches(Regex(#"^[A-Za-z0-9\-_]*$"#)))
    /// Value of parameter to start execution of a SageMaker Model Building
    /// Pipeline.
    Value: String(length <= 1024 && length >= 1)
}
/// Contains the message group ID to use when the target is a FIFO queue.
/// If you specify an SQS FIFO queue as a target, the queue must have
/// content-based deduplication enabled.
class SqsParameters {
    /// The FIFO message group ID to use as the target.
    MessageGroupId: String(length <= 128 && length >= 1)?
}
