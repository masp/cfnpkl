/// HealthLake FHIR Datastore
extends ".../AWS/Resource.pkl"
Type = "AWS::HealthLake::FHIRDatastore"
Properties: Props?
class Props {
    CreatedAt: CreatedAt?
    DatastoreArn: String(matches(Regex(#"^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?"#)))?
    DatastoreEndpoint: String(length <= 10000)?
    DatastoreId: String(length <= 32 && length >= 1)?
    DatastoreName: String(length <= 256 && length >= 1)?
    DatastoreStatus: "CREATING" | "ACTIVE" | "DELETING" | "DELETED" | *Null
    DatastoreTypeVersion: "R4" | *Null
    PreloadDataConfig: PreloadDataConfig?
    SseConfiguration: SseConfiguration?
    IdentityProviderConfiguration: IdentityProviderConfiguration?
    Tags: Listing<Tag>?
}
/// The time that a Data Store was created.
class CreatedAt {
    /// Seconds since epoch.
    Seconds: String
    /// Nanoseconds.
    Nanos: Int
}
/// The preloaded data configuration for the Data Store. Only data
/// preloaded from Synthea is supported.
class PreloadDataConfig {
    /// The type of preloaded data. Only Synthea preloaded data is supported.
    PreloadDataType: "SYNTHEA"
}
/// The server-side encryption key configuration for a customer provided
/// encryption key.
class SseConfiguration {
    KmsEncryptionConfig: KmsEncryptionConfig
}
/// The customer-managed-key (CMK) used when creating a Data Store. If a
/// customer owned key is not specified, an AWS owned key will be used for
/// encryption.
class KmsEncryptionConfig {
    /// The type of customer-managed-key (CMK) used for encryption. The two
    /// types of supported CMKs are customer owned CMKs and AWS owned CMKs.
    CmkType: "CUSTOMER_MANAGED_KMS_KEY" | "AWS_OWNED_KMS_KEY"
    /// The KMS encryption key id/alias used to encrypt the Data Store
    /// contents at rest.
    KmsKeyId: String(length <= 400 && length >= 1 && matches(Regex(#"(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))"#)))?
}
/// The identity provider configuration for the datastore
class IdentityProviderConfiguration {
    /// Type of Authorization Strategy. The two types of supported
    /// Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
    AuthorizationStrategy: "SMART_ON_FHIR_V1" | "AWS_AUTH"
    /// Flag to indicate if fine-grained authorization will be enabled for the
    /// datastore
    FineGrainedAuthorizationEnabled: Boolean?
    /// The JSON metadata elements for identity provider configuration.
    Metadata: String?
    /// The Amazon Resource Name (ARN) of the Lambda function that will be
    /// used to decode the access token created by the authorization server.
    IdpLambdaArn: String(length <= 256 && length >= 49 && matches(Regex(#"arn:aws[-a-z]*:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9\-_\.]+(:(\$LATEST|[a-zA-Z0-9\-_]+))?"#)))?
}
/// A key-value pair. A tag consists of a tag key and a tag value. Tag
/// keys and tag values are both required, but tag values can be empty
/// (null) strings.
class Tag {
    /// The key of the tag.
    Key: String(length <= 128 && length >= 1)
    /// The value of the tag.
    Value: String(length <= 256 && length >= 0)
}
