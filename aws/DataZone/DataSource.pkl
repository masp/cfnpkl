/// Definition of AWS::DataZone::DataSource Resource Type
extends ".../AWS/Resource.pkl"
Type = "AWS::DataZone::DataSource"
Properties: Props?
class Props {
    /// The metadata forms that are to be attached to the assets that this
    /// data source works with.
    AssetFormsInput: Listing<FormInput>?
    /// The timestamp of when the data source was created.
    CreatedAt: String?
    /// The description of the data source.
    Description: String(length <= 2048)?
    /// The ID of the Amazon DataZone domain where the data source is created.
    DomainId: String(matches(Regex(#"^dzd[-_][a-zA-Z0-9_-]{1,36}$"#)))?
    /// The ID of the Amazon DataZone domain where the data source is created.
    DomainIdentifier: String(matches(Regex(#"^dzd[-_][a-zA-Z0-9_-]{1,36}$"#)))?
    /// Specifies whether the data source is enabled.
    EnableSetting: "ENABLED" | "DISABLED" | *Null
    /// The unique identifier of the Amazon DataZone environment to which the
    /// data source publishes assets.
    EnvironmentId: String(matches(Regex(#"^[a-zA-Z0-9_-]{1,36}$"#)))?
    /// The unique identifier of the Amazon DataZone environment to which the
    /// data source publishes assets.
    EnvironmentIdentifier: String?
    /// The unique identifier of the data source.
    Id: String(matches(Regex(#"^[a-zA-Z0-9_-]{1,36}$"#)))?
    /// Configuration of the data source. It can be set to either
    /// glueRunConfiguration or redshiftRunConfiguration.
    Configuration: DataSourceConfigurationInput0 | DataSourceConfigurationInput1 | *Null
    /// The number of assets created by the data source during its last run.
    LastRunAssetCount: Float?
    /// The timestamp that specifies when the data source was last run.
    LastRunAt: String?
    /// The status of the last run of this data source.
    LastRunStatus: String?
    /// The name of the data source.
    Name: String(length <= 256 && length >= 1)?
    /// The ID of the Amazon DataZone project to which the data source is
    /// added.
    ProjectId: String(matches(Regex(#"^[a-zA-Z0-9_-]{1,36}$"#)))?
    /// The identifier of the Amazon DataZone project in which you want to add
    /// the data source.
    ProjectIdentifier: String?
    /// Specifies whether the assets that this data source creates in the
    /// inventory are to be also automatically published to the catalog.
    PublishOnImport: Boolean?
    /// Specifies whether the business name generation is to be enabled for
    /// this data source.
    Recommendation: RecommendationConfiguration?
    /// The schedule of the data source runs.
    Schedule: ScheduleConfiguration?
    /// The status of the data source.
    Status: "CREATING" | "FAILED_CREATION" | "READY" | "UPDATING" | "FAILED_UPDATE" | "RUNNING" | "DELETING" | "FAILED_DELETION" | *Null
    /// The type of the data source.
    Type: String(length <= 256 && length >= 1)?
    /// The timestamp of when this data source was updated.
    UpdatedAt: String?
}
/// The details of a metadata form.
class FormInput {
    /// The name of the metadata form.
    FormName: String(length <= 128 && length >= 1 && matches(Regex(#"^(?![0-9_])\w+$|^_\w*[a-zA-Z0-9]\w*$"#)))
    /// The ID of the metadata form type.
    TypeIdentifier: String(length <= 385 && length >= 1 && matches(Regex(#"^(?!\.)[\w\.]*\w$"#)))?
    /// The revision of the metadata form type.
    TypeRevision: String(length <= 64 && length >= 1)?
    /// The content of the metadata form.
    Content: String(length <= 75000)?
}
class DataSourceConfigurationInput0 {
    GlueRunConfiguration: GlueRunConfigurationInput?
}
class GlueRunConfigurationInput {
    /// The data access role included in the configuration details of the AWS
    /// Glue data source.
    DataAccessRole: String(matches(Regex(#"^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]{1,128}$"#)))?
    /// The relational filter configurations included in the configuration
    /// details of the AWS Glue data source.
    RelationalFilterConfigurations: Listing<RelationalFilterConfiguration>
}
/// The relational filter configuration for the data source.
class RelationalFilterConfiguration {
    /// The database name specified in the relational filter configuration for
    /// the data source.
    DatabaseName: String(length <= 128 && length >= 1)
    /// The schema name specified in the relational filter configuration for
    /// the data source.
    SchemaName: String(length <= 128 && length >= 1)?
    /// The filter expressions specified in the relational filter
    /// configuration for the data source.
    FilterExpressions: Listing<FilterExpression>?
}
/// The search filter expression.
class FilterExpression {
    Type: "INCLUDE" | "EXCLUDE"
    Expression: String(length <= 2048 && length >= 1)
}
class DataSourceConfigurationInput1 {
    RedshiftRunConfiguration: RedshiftRunConfigurationInput?
}
/// The configuration details of the Amazon Redshift data source.
class RedshiftRunConfigurationInput {
    /// The data access role included in the configuration details of the
    /// Amazon Redshift data source.
    DataAccessRole: String(matches(Regex(#"^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]{1,128}$"#)))?
    RelationalFilterConfigurations: Listing<RelationalFilterConfiguration>
    /// The details of the credentials required to access an Amazon Redshift
    /// cluster.
    RedshiftCredentialConfiguration: RedshiftCredentialConfiguration
    /// The details of the Amazon Redshift storage as part of the
    /// configuration of an Amazon Redshift data source run.
    RedshiftStorage: RedshiftStorage0 | RedshiftStorage1
}
/// The ARN of a secret manager for an Amazon Redshift cluster.
class RedshiftCredentialConfiguration {
    /// The ARN of a secret manager for an Amazon Redshift cluster.
    SecretManagerArn: String(length <= 256 && matches(Regex(#"^arn:aws[^:]*:secretsmanager:[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]:\d{12}:secret:.*$"#)))
}
/// The details of the Amazon Redshift cluster source.
class RedshiftStorage0 {
    RedshiftClusterSource: RedshiftClusterStorage
}
/// The name of an Amazon Redshift cluster.
class RedshiftClusterStorage {
    /// The name of an Amazon Redshift cluster.
    ClusterName: String(length <= 63 && length >= 1 && matches(Regex(#"^[0-9a-z].[a-z0-9\-]*$"#)))
}
/// The details of the Amazon Redshift Serverless workgroup source.
class RedshiftStorage1 {
    RedshiftServerlessSource: RedshiftServerlessStorage
}
/// The details of the Amazon Redshift Serverless workgroup storage.
class RedshiftServerlessStorage {
    /// The name of the Amazon Redshift Serverless workgroup.
    WorkgroupName: String(length <= 64 && length >= 3 && matches(Regex(#"^[a-z0-9-]+$"#)))
}
/// The recommendation to be updated as part of the UpdateDataSource
/// action.
class RecommendationConfiguration {
    /// Specifies whether automatic business name generation is to be enabled
    /// or not as part of the recommendation configuration.
    EnableBusinessNameGeneration: Boolean?
}
/// The schedule of the data source runs.
class ScheduleConfiguration {
    /// The timezone of the data source run.
    Timezone: String?
    /// The schedule of the data source runs.
    Schedule: String(length <= 256 && length >= 1 && matches(Regex(#"cron\((\b[0-5]?[0-9]\b) (\b2[0-3]\b|\b[0-1]?[0-9]\b) (.*){1,5} (.*){1,5} (.*){1,5} (.*){1,5}\)"#)))?
}
