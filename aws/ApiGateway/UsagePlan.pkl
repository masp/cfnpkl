/// The ``AWS::ApiGateway::UsagePlan`` resource creates a usage plan for
/// deployed APIs. A usage plan sets a target for the throttling and quota
/// limits on individual client API keys. For more information, see
/// [Creating and Using API Usage Plans in Amazon API Gateway](https://doc
/// s.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-
/// usage-plans.html) in the *API Gateway Developer Guide*.  In some cases
/// clients can exceed the targets that you set. Don’t rely on usage plans
/// to control costs. Consider using [](https://docs.aws.amazon.com/cost-
/// management/latest/userguide/budgets-managing-costs.html) to monitor
/// costs and
/// [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-
/// chapter.html) to manage API requests.
extends ".../AWS/Resource.pkl"
Type = "AWS::ApiGateway::UsagePlan"
Properties: Props?
class Props {
    Id: String?
    /// The associated API stages of a usage plan.
    ApiStages: Listing<ApiStage>?
    /// The description of a usage plan.
    Description: String?
    /// The target maximum number of permitted requests per a given unit time
    /// interval.
    Quota: QuotaSettings?
    /// The collection of tags. Each tag element is associated with a given
    /// resource.
    Tags: Listing<Tag>?
    /// A map containing method level throttling information for API stage in
    /// a usage plan.
    Throttle: ThrottleSettings?
    /// The name of a usage plan.
    UsagePlanName: String?
}
/// API stage name of the associated API stage in a usage plan.
class ApiStage {
    /// API Id of the associated API stage in a usage plan.
    ApiId: String?
    /// API stage name of the associated API stage in a usage plan.
    Stage: String?
    /// Map containing method level throttling information for API stage in a
    /// usage plan.
    Throttle: Mapping?
}
/// ``QuotaSettings`` is a property of the [AWS::ApiGateway::UsagePlan](ht
/// tps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-
/// resource-apigateway-usageplan.html) resource that specifies a target
/// for the maximum number of requests users can make to your REST APIs.
/// In some cases clients can exceed the targets that you set. Don’t rely
/// on usage plans to control costs. Consider using
/// [](https://docs.aws.amazon.com/cost-
/// management/latest/userguide/budgets-managing-costs.html) to monitor
/// costs and
/// [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-
/// chapter.html) to manage API requests.
class QuotaSettings {
    /// The target maximum number of requests that can be made in a given time
    /// period.
    Limit: Int?
    /// The number of requests subtracted from the given limit in the initial
    /// time period.
    Offset: Int?
    /// The time period in which the limit applies. Valid values are "DAY",
    /// "WEEK" or "MONTH".
    Period: String?
}
class Tag {
    /// The key name of the tag. You can specify a value that is 1 to 128
    /// Unicode characters in length and cannot be prefixed with aws:. You can
    /// use any of the following characters: the set of Unicode letters,
    /// digits, whitespace, _, ., /, =, +, and -.
    Key: String(length <= 128 && length >= 1)
    /// The value for the tag. You can specify a value that is 0 to 256
    /// Unicode characters in length and cannot be prefixed with aws:. You can
    /// use any of the following characters: the set of Unicode letters,
    /// digits, whitespace, _, ., /, =, +, and -.
    Value: String(length <= 256 && length >= 0)
}
/// ``ThrottleSettings`` is a property of the [AWS::ApiGateway::UsagePlan]
/// (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-
/// resource-apigateway-usageplan.html) resource that specifies the
/// overall request rate (average requests per second) and burst capacity
/// when users call your REST APIs.
class ThrottleSettings {
    /// The API target request burst rate limit. This allows more requests
    /// through for a period of time than the target rate limit.
    BurstLimit: Int?
    /// The API target request rate limit.
    RateLimit: Float?
}
