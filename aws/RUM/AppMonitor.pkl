/// Resource Type definition for AWS::RUM::AppMonitor
extends ".../AWS/Resource.pkl"
Type = "AWS::RUM::AppMonitor"
Properties: Props?
class Props {
    /// The unique ID of the new app monitor.
    Id: String(length <= 36 && length >= 36 && matches(Regex(#"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"#)))?
    /// A name for the app monitor
    Name: String(length <= 255 && length >= 1 && matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#)))?
    /// The top-level internet domain name for which your application has
    /// administrative authority.
    Domain: String(length <= 253 && length >= 1 && matches(Regex(#"^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\*\.)(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))"#)))?
    /// Data collected by RUM is kept by RUM for 30 days and then deleted.
    /// This parameter specifies whether RUM sends a copy of this telemetry
    /// data to CWLlong in your account. This enables you to keep the
    /// telemetry data for more than 30 days, but it does incur CWLlong
    /// charges. If you omit this parameter, the default is false
    CwLogEnabled: Boolean?
    Tags: Listing<Tag>?
    AppMonitorConfiguration: AppMonitorConfiguration?
    CustomEvents: CustomEvents?
}
/// A key-value pair to associate with a resource.
class Tag {
    /// The key name of the tag. You can specify a value that is 1 to 128
    /// Unicode characters in length and cannot be prefixed with aws:. You can
    /// use any of the following characters: the set of Unicode letters,
    /// digits, whitespace, _, ., /, =, +, and -.
    Key: String(length <= 128 && length >= 1 && matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))
    /// The value for the tag. You can specify a value that is 0 to 256
    /// Unicode characters in length and cannot be prefixed with aws:. You can
    /// use any of the following characters: the set of Unicode letters,
    /// digits, whitespace, _, ., /, =, +, and -.
    Value: String(length <= 256 && length >= 0)
}
/// AppMonitor configuration
class AppMonitorConfiguration {
    /// The ID of the identity pool that is used to authorize the sending of
    /// data to RUM.
    IdentityPoolId: String(length <= 55 && length >= 1 && matches(Regex(#"[\w-]+:[0-9a-f-]+"#)))?
    /// A list of URLs in your website or application to exclude from RUM data
    /// collection. You can't include both ExcludedPages and IncludedPages in
    /// the same operation.
    ExcludedPages: Listing<String(length <= 1260 && length >= 1 && matches(Regex(#"https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)"#)))>?
    /// If this app monitor is to collect data from only certain pages in your
    /// application, this structure lists those pages. You can't include both
    /// ExcludedPages and IncludedPages in the same operation.
    IncludedPages: Listing<String(length <= 1260 && length >= 1 && matches(Regex(#"https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)"#)))>?
    /// A list of pages in the RUM console that are to be displayed with a
    /// favorite icon.
    FavoritePages: Listing<String>?
    /// Specifies the percentage of user sessions to use for RUM data
    /// collection. Choosing a higher percentage gives you more data but also
    /// incurs more costs. The number you specify is the percentage of user
    /// sessions that will be used. If you omit this parameter, the default of
    /// 10 is used.
    SessionSampleRate: Float?
    /// The ARN of the guest IAM role that is attached to the identity pool
    /// that is used to authorize the sending of data to RUM.
    GuestRoleArn: String(matches(Regex(#"arn:[^:]*:[^:]*:[^:]*:[^:]*:.*"#)))?
    /// If you set this to true, the RUM web client sets two cookies, a
    /// session cookie and a user cookie. The cookies allow the RUM web client
    /// to collect data relating to the number of users an application has and
    /// the behavior of the application across a sequence of events. Cookies
    /// are stored in the top-level domain of the current page.
    AllowCookies: Boolean?
    /// An array that lists the types of telemetry data that this app monitor
    /// is to collect.
    Telemetries: Listing<"errors" | "performance" | "http">?
    /// If you set this to true, RUM enables xray tracing for the user
    /// sessions that RUM samples. RUM adds an xray trace header to allowed
    /// HTTP requests. It also records an xray segment for allowed HTTP
    /// requests. You can see traces and segments from these user sessions in
    /// the xray console and the CW ServiceLens console.
    EnableXRay: Boolean?
    /// An array of structures which define the destinations and the metrics
    /// that you want to send.
    MetricDestinations: Listing<MetricDestination>?
}
/// An structure which defines the destination and the metrics that you
/// want to send.
class MetricDestination {
    /// Defines the destination to send the metrics to. Valid values are
    /// CloudWatch and Evidently. If you specify Evidently, you must also
    /// specify the ARN of the Evidently experiment that is to be the
    /// destination and an IAM role that has permission to write to the
    /// experiment.
    Destination: "CloudWatch" | "Evidently"
    /// Use this parameter only if Destination is Evidently. This parameter
    /// specifies the ARN of the Evidently experiment that will receive the
    /// extended metrics.
    DestinationArn: String(matches(Regex(#"arn:[^:]*:[^:]*:[^:]*:[^:]*:.*"#)))?
    /// This parameter is required if Destination is Evidently. If Destination
    /// is CloudWatch, do not use this parameter.  This parameter specifies
    /// the ARN of an IAM role that RUM will assume to write to the Evidently
    /// experiment that you are sending metrics to. This role must have
    /// permission to write to that experiment.
    IamRoleArn: String(matches(Regex(#"arn:[^:]*:[^:]*:[^:]*:[^:]*:.*"#)))?
    /// An array of structures which define the metrics that you want to send.
    MetricDefinitions: Listing<MetricDefinition>?
}
/// A single metric definition
class MetricDefinition {
    /// The name for the metric that is defined in this structure. For
    /// extended metrics, valid values are the following:
    /// PerformanceNavigationDuration  PerformanceResourceDuration
    /// NavigationSatisfiedTransaction  NavigationToleratedTransaction
    /// NavigationFrustratedTransaction  WebVitalsCumulativeLayoutShift
    /// WebVitalsFirstInputDelay  WebVitalsLargestContentfulPaint
    /// JsErrorCount  HttpErrorCount  SessionCount
    Name: String(length <= 255 && length >= 1)
    /// The namespace used by CloudWatch Metrics for the metric that is
    /// defined in this structure
    Namespace: String(length <= 237 && length >= 1 && matches(Regex(#"[a-zA-Z0-9-._/#:]+$"#)))?
    /// The field within the event object that the metric value is sourced
    /// from.  If you omit this field, a hardcoded value of 1 is pushed as the
    /// metric value. This is useful if you just want to count the number of
    /// events that the filter catches.  If this metric is sent to Evidently,
    /// this field will be passed to Evidently raw and Evidently will handle
    /// data extraction from the event.
    ValueKey: String(length <= 256 && length >= 1 && matches(Regex(#".*"#)))?
    /// The CloudWatch metric unit to use for this metric. If you omit this
    /// field, the metric is recorded with no unit.
    UnitLabel: String(length <= 256 && length >= 1)?
    /// Use this field only if you are sending the metric to CloudWatch.  This
    /// field is a map of field paths to dimension names. It defines the
    /// dimensions to associate with this metric in CloudWatch. For extended
    /// metrics, valid values for the entries in this field are the following:
    /// "metadata.pageId": "PageId"  "metadata.browserName": "BrowserName"
    /// "metadata.deviceType": "DeviceType"  "metadata.osName": "OSName"
    /// "metadata.countryCode": "CountryCode"  "event_details.fileType":
    /// "FileType"  All dimensions listed in this field must also be included
    /// in EventPattern.
    DimensionKeys: Mapping?
    /// The pattern that defines the metric, specified as a JSON object. RUM
    /// checks events that happen in a user's session against the pattern, and
    /// events that match the pattern are sent to the metric destination.
    /// When you define extended metrics, the metric definition is not valid
    /// if EventPattern is omitted.  Example event patterns:  '{ "event_type":
    /// ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [
    /// "Chrome", "Safari" ], } }'  '{ "event_type":
    /// ["com.amazon.rum.performance_navigation_event"], "metadata": {
    /// "browserName": [ "Chrome", "Firefox" ] }, "event_details": {
    /// "duration": [{ "numeric": [ "<", 2000 ] }] } }'  '{ "event_type":
    /// ["com.amazon.rum.performance_navigation_event"], "metadata": {
    /// "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] },
    /// "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ]
    /// }] } }'  If the metrics destination' is CloudWatch and the event also
    /// matches a value in DimensionKeys, then the metric is published with
    /// the specified dimensions.
    EventPattern: String(length <= 4000 && length >= 1)?
}
/// AppMonitor custom events configuration
class CustomEvents {
    /// Indicates whether AppMonitor accepts custom events.
    Status: "ENABLED" | "DISABLED" | *Null
}
