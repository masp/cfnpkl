/// Creates a listener rule. Each listener has a default rule for checking
/// connection requests, but you can define additional rules. Each rule
/// consists of a priority, one or more actions, and one or more
/// conditions.
extends ".../AWS/Resource.pkl"
Type = "AWS::VpcLattice::Rule"
Properties: Props?
class Props {
    Action: Action?
    Arn: String(length <= 2048 && length >= 20 && matches(Regex(#"^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/((rule-[0-9a-z]{17})|(default))$"#)))?
    Id: String(length <= 22 && length >= 7 && matches(Regex(#"^((rule-[0-9a-z]{17})|(default))$"#)))?
    ListenerIdentifier: String(length <= 2048 && length >= 20 && matches(Regex(#"^((listener-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}))$"#)))?
    Match: Match?
    Name: String(length <= 63 && length >= 3 && matches(Regex(#"^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$"#)))?
    Priority: Int?
    ServiceIdentifier: String(length <= 2048 && length >= 20 && matches(Regex(#"^((svc-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}))$"#)))?
    Tags: Listing<Tag>?
}
class Action {
    Forward: Forward?
    FixedResponse: FixedResponse?
}
class Forward {
    TargetGroups: Listing<WeightedTargetGroup>
}
class WeightedTargetGroup {
    TargetGroupIdentifier: String(length <= 2048 && length >= 20 && matches(Regex(#"^((tg-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}))$"#)))
    Weight: Int?
}
class FixedResponse {
    StatusCode: Int
}
class Match {
    HttpMatch: HttpMatch
}
class HttpMatch {
    Method: "CONNECT" | "DELETE" | "GET" | "HEAD" | "OPTIONS" | "POST" | "PUT" | "TRACE" | *Null
    PathMatch: PathMatch?
    HeaderMatches: Listing<HeaderMatch>?
}
class PathMatch {
    Match: PathMatchType
    CaseSensitive: Boolean?
}
class PathMatchType {
    Exact: String(length <= 128 && length >= 1 && matches(Regex(#"^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$"#)))?
    Prefix: String(length <= 128 && length >= 1 && matches(Regex(#"^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$"#)))?
}
class HeaderMatch {
    Name: String(length <= 40 && length >= 1)
    Match: HeaderMatchType
    CaseSensitive: Boolean?
}
class HeaderMatchType {
    Exact: String(length <= 128 && length >= 1)?
    Prefix: String(length <= 128 && length >= 1)?
    Contains: String(length <= 128 && length >= 1)?
}
class Tag {
    Key: String(length <= 128 && length >= 1)
    Value: String(length <= 256 && length >= 1)
}
