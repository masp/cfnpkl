/// Resource Type definition for AWS::SageMaker::Space
extends ".../AWS/Resource.pkl"
Type = "AWS::SageMaker::Space"
Properties: Props?
class Props {
    /// The space Amazon Resource Name (ARN).
    SpaceArn: String(length <= 256 && matches(Regex(#"arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:space/.*"#)))?
    /// The ID of the associated Domain.
    DomainId: String(length <= 63 && length >= 1)?
    /// A name for the Space.
    SpaceName: String(length <= 63 && length >= 1)?
    /// A collection of settings.
    SpaceSettings: SpaceSettings?
    /// A list of tags to apply to the space.
    Tags: Listing<Tag>?
    OwnershipSettings: OwnershipSettings?
    SpaceSharingSettings: SpaceSharingSettings?
    SpaceDisplayName: String(length <= 64 && matches(Regex(#"^(?!\s*$).+"#)))?
    Url: String(length <= 1024)?
}
/// A collection of settings that apply to spaces of Amazon SageMaker
/// Studio. These settings are specified when the CreateSpace API is
/// called.
class SpaceSettings {
    /// The Jupyter server's app settings.
    JupyterServerAppSettings: JupyterServerAppSettings?
    /// The kernel gateway app settings.
    KernelGatewayAppSettings: KernelGatewayAppSettings?
    /// The JupyterLab app settings.
    JupyterLabAppSettings: SpaceJupyterLabAppSettings?
    /// The CodeEditor app settings.
    CodeEditorAppSettings: SpaceCodeEditorAppSettings?
    /// Default storage settings for a space.
    SpaceStorageSettings: SpaceStorageSettings?
    AppType: "JupyterServer" | "KernelGateway" | "TensorBoard" | "RStudioServerPro" | "RSessionGateway" | "JupyterLab" | "CodeEditor" | *Null
    CustomFileSystems: Listing<CustomFileSystem>?
}
/// The JupyterServer app settings.
class JupyterServerAppSettings {
    DefaultResourceSpec: ResourceSpec?
}
class ResourceSpec {
    /// The instance type that the image version runs on.
    InstanceType: "system" | "ml.t3.micro" | "ml.t3.small" | "ml.t3.medium" | "ml.t3.large" | "ml.t3.xlarge" | "ml.t3.2xlarge" | "ml.m5.large" | "ml.m5.xlarge" | "ml.m5.2xlarge" | "ml.m5.4xlarge" | "ml.m5.8xlarge" | "ml.m5.12xlarge" | "ml.m5.16xlarge" | "ml.m5.24xlarge" | "ml.c5.large" | "ml.c5.xlarge" | "ml.c5.2xlarge" | "ml.c5.4xlarge" | "ml.c5.9xlarge" | "ml.c5.12xlarge" | "ml.c5.18xlarge" | "ml.c5.24xlarge" | "ml.p3.2xlarge" | "ml.p3.8xlarge" | "ml.p3.16xlarge" | "ml.g4dn.xlarge" | "ml.g4dn.2xlarge" | "ml.g4dn.4xlarge" | "ml.g4dn.8xlarge" | "ml.g4dn.12xlarge" | "ml.g4dn.16xlarge" | "ml.r5.large" | "ml.r5.xlarge" | "ml.r5.2xlarge" | "ml.r5.4xlarge" | "ml.r5.8xlarge" | "ml.r5.12xlarge" | "ml.r5.16xlarge" | "ml.r5.24xlarge" | "ml.p3dn.24xlarge" | "ml.m5d.large" | "ml.m5d.xlarge" | "ml.m5d.2xlarge" | "ml.m5d.4xlarge" | "ml.m5d.8xlarge" | "ml.m5d.12xlarge" | "ml.m5d.16xlarge" | "ml.m5d.24xlarge" | "ml.g5.xlarge" | "ml.g5.2xlarge" | "ml.g5.4xlarge" | "ml.g5.8xlarge" | "ml.g5.12xlarge" | "ml.g5.16xlarge" | "ml.g5.24xlarge" | "ml.g5.48xlarge" | "ml.p4d.24xlarge" | "ml.p4de.24xlarge" | "ml.geospatial.interactive" | "ml.trn1.2xlarge" | "ml.trn1.32xlarge" | "ml.trn1n.32xlarge" | *Null
    /// The ARN of the SageMaker image that the image version belongs to.
    SageMakerImageArn: String(length <= 256 && matches(Regex(#"^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image/[a-z0-9]([-.]?[a-z0-9])*$"#)))?
    /// The ARN of the image version created on the instance.
    SageMakerImageVersionArn: String(length <= 256 && matches(Regex(#"^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image-version/[a-z0-9]([-.]?[a-z0-9])*/[0-9]+$"#)))?
}
/// The kernel gateway app settings.
class KernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a
    /// KernelGateway app.
    CustomImages: Listing<CustomImage>?
    /// The default instance type and the Amazon Resource Name (ARN) of the
    /// default SageMaker image used by the KernelGateway app.
    DefaultResourceSpec: ResourceSpec?
}
/// A custom SageMaker image.
class CustomImage {
    /// The Name of the AppImageConfig.
    AppImageConfigName: String(length <= 63 && matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}"#)))
    /// The name of the CustomImage. Must be unique to your account.
    ImageName: String(length <= 63 && matches(Regex(#"^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$"#)))
    /// The version number of the CustomImage.
    ImageVersionNumber: Int?
}
/// The JupyterServer app settings.
class SpaceJupyterLabAppSettings {
    DefaultResourceSpec: ResourceSpec?
    /// A list of CodeRepositories available for use with JupyterLab apps.
    CodeRepositories: Listing<CodeRepository>?
}
class CodeRepository {
    /// A CodeRepository (valid URL) to be used within Jupyter's Git
    /// extension.
    RepositoryUrl: String(length <= 256 && matches(Regex(#"^https://([.\-_a-zA-Z0-9]+/?){3,1016}$"#)))
}
/// The CodeEditor app settings.
class SpaceCodeEditorAppSettings {
    DefaultResourceSpec: ResourceSpec?
}
class SpaceStorageSettings {
    EbsStorageSettings: EbsStorageSettings?
}
/// Properties related to the space's Amazon Elastic Block Store volume.
class EbsStorageSettings {
    /// Size of the Amazon EBS volume in Gb
    EbsVolumeSizeInGb: Int
}
class CustomFileSystem {
    EFSFileSystem: EFSFileSystem?
}
class EFSFileSystem {
    FileSystemId: String(length <= 21 && length >= 11 && matches(Regex(#"^(fs-[0-9a-f]{8,})$"#)))
}
class Tag {
    Value: String(length <= 128 && length >= 1)
    Key: String(length <= 128 && length >= 1)
}
class OwnershipSettings {
    OwnerUserProfileName: String(length <= 63 && matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}"#)))
}
class SpaceSharingSettings {
    SharingType: "Private" | "Shared"
}
