/// Resource Type definition for AWS::S3::Bucket
extends ".../AWS/Resource.pkl"
Type = "AWS::S3::Bucket"
Properties: Props?
class Props {
    /// Configuration for the transfer acceleration state.
    AccelerateConfiguration: AccelerateConfiguration?
    /// A canned access control list (ACL) that grants predefined permissions
    /// to the bucket.
    AccessControl: "AuthenticatedRead" | "AwsExecRead" | "BucketOwnerFullControl" | "BucketOwnerRead" | "LogDeliveryWrite" | "Private" | "PublicRead" | "PublicReadWrite" | *Null
    /// The configuration and any analyses for the analytics filter of an
    /// Amazon S3 bucket.
    AnalyticsConfigurations: Listing<AnalyticsConfiguration>?
    BucketEncryption: BucketEncryption?
    /// A name for the bucket. If you don't specify a name, AWS CloudFormation
    /// generates a unique physical ID and uses that ID for the bucket name.
    BucketName: String(length <= 63 && length >= 3 && matches(Regex(#"^[a-z0-9][a-z0-9//.//-]*[a-z0-9]$"#)))?
    /// Rules that define cross-origin resource sharing of objects in this
    /// bucket.
    CorsConfiguration: CorsConfiguration?
    /// Specifies the S3 Intelligent-Tiering configuration for an Amazon S3
    /// bucket.
    IntelligentTieringConfigurations: Listing<IntelligentTieringConfiguration>?
    /// The inventory configuration for an Amazon S3 bucket.
    InventoryConfigurations: Listing<InventoryConfiguration>?
    /// Rules that define how Amazon S3 manages objects during their lifetime.
    LifecycleConfiguration: LifecycleConfiguration?
    /// Settings that define where logs are stored.
    LoggingConfiguration: LoggingConfiguration?
    /// Settings that define a metrics configuration for the CloudWatch
    /// request metrics from the bucket.
    MetricsConfigurations: Listing<MetricsConfiguration>?
    /// Configuration that defines how Amazon S3 handles bucket notifications.
    NotificationConfiguration: NotificationConfiguration?
    /// Places an Object Lock configuration on the specified bucket.
    ObjectLockConfiguration: ObjectLockConfiguration?
    /// Indicates whether this bucket has an Object Lock configuration
    /// enabled.
    ObjectLockEnabled: Boolean?
    /// Specifies the container element for object ownership rules.
    OwnershipControls: OwnershipControls?
    PublicAccessBlockConfiguration: PublicAccessBlockConfiguration?
    /// Configuration for replicating objects in an S3 bucket.
    ReplicationConfiguration: ReplicationConfiguration?
    /// An arbitrary set of tags (key-value pairs) for this S3 bucket.
    Tags: Listing<Tag>?
    VersioningConfiguration: VersioningConfiguration?
    WebsiteConfiguration: WebsiteConfiguration?
    /// The Amazon Resource Name (ARN) of the specified bucket.
    Arn: String?
    /// The IPv4 DNS name of the specified bucket.
    DomainName: String?
    /// The IPv6 DNS name of the specified bucket. For more information about
    /// dual-stack endpoints, see [Using Amazon S3 Dual-Stack
    /// Endpoints](https://docs.aws.amazon.com/AmazonS3/latest/dev/dual-stack-
    /// endpoints.html).
    DualStackDomainName: String?
    /// Returns the regional domain name of the specified bucket.
    RegionalDomainName: String?
    /// The Amazon S3 website endpoint for the specified bucket.
    WebsiteURL: String?
}
class AccelerateConfiguration {
    /// Configures the transfer acceleration state for an Amazon S3 bucket.
    AccelerationStatus: "Enabled" | "Suspended"
}
/// Specifies the configuration and any analyses for the analytics filter
/// of an Amazon S3 bucket.
class AnalyticsConfiguration {
    TagFilters: Listing<TagFilter>?
    StorageClassAnalysis: StorageClassAnalysis
    /// The ID that identifies the analytics configuration.
    Id: String
    /// The prefix that an object must have to be included in the analytics
    /// results.
    Prefix: String?
}
/// Tags to use to identify a subset of objects for an Amazon S3 bucket.
class TagFilter {
    Value: String
    Key: String
}
/// Specifies data related to access patterns to be collected and made
/// available to analyze the tradeoffs between different storage classes
/// for an Amazon S3 bucket.
class StorageClassAnalysis {
    DataExport: DataExport?
}
/// Specifies how data related to the storage class analysis for an Amazon
/// S3 bucket should be exported.
class DataExport {
    Destination: Destination
    /// The version of the output schema to use when exporting data.
    OutputSchemaVersion: String
}
/// Specifies information about where to publish analysis or configuration
/// results for an Amazon S3 bucket and S3 Replication Time Control (S3
/// RTC).
class Destination {
    /// The Amazon Resource Name (ARN) of the bucket to which data is
    /// exported.
    BucketArn: String
    /// The account ID that owns the destination S3 bucket.
    BucketAccountId: String?
    /// Specifies the file format used when exporting data to Amazon S3.
    Format: "CSV" | "ORC" | "Parquet"
    /// The prefix to use when exporting data. The prefix is prepended to all
    /// results.
    Prefix: String?
}
/// Specifies default encryption for a bucket using server-side encryption
/// with either Amazon S3-managed keys (SSE-S3) or AWS KMS-managed keys
/// (SSE-KMS).
class BucketEncryption {
    /// Specifies the default server-side-encryption configuration.
    ServerSideEncryptionConfiguration: Listing<ServerSideEncryptionRule>
}
/// Specifies the default server-side encryption configuration.
class ServerSideEncryptionRule {
    /// Specifies whether Amazon S3 should use an S3 Bucket Key with server-
    /// side encryption using KMS (SSE-KMS) for new objects in the bucket.
    /// Existing objects are not affected. Setting the BucketKeyEnabled
    /// element to true causes Amazon S3 to use an S3 Bucket Key. By default,
    /// S3 Bucket Key is not enabled.
    BucketKeyEnabled: Boolean?
    ServerSideEncryptionByDefault: ServerSideEncryptionByDefault?
}
/// Specifies the default server-side encryption to apply to new objects
/// in the bucket. If a PUT Object request doesn't specify any server-side
/// encryption, this default encryption will be applied.
class ServerSideEncryptionByDefault {
    /// "KMSMasterKeyID" can only be used when you set the value of
    /// SSEAlgorithm as aws:kms or aws:kms:dsse.
    KMSMasterKeyID: String?
    SSEAlgorithm: "aws:kms" | "AES256" | "aws:kms:dsse"
}
class CorsConfiguration {
    CorsRules: Listing<CorsRule>
}
/// A set of origins and methods (cross-origin access that you want to
/// allow). You can add up to 100 rules to the configuration.
class CorsRule {
    /// Headers that are specified in the Access-Control-Request-Headers
    /// header.
    AllowedHeaders: Listing<String>?
    /// An HTTP method that you allow the origin to execute.
    AllowedMethods: Listing<"GET" | "PUT" | "HEAD" | "POST" | "DELETE">
    /// One or more origins you want customers to be able to access the bucket
    /// from.
    AllowedOrigins: Listing<String>
    /// One or more headers in the response that you want customers to be able
    /// to access from their applications (for example, from a JavaScript
    /// XMLHttpRequest object).
    ExposedHeaders: Listing<String>?
    /// A unique identifier for this rule.
    Id: String(length <= 255)?
    /// The time in seconds that your browser is to cache the preflight
    /// response for the specified resource.
    MaxAge: Int?
}
class IntelligentTieringConfiguration {
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    Id: String
    /// An object key name prefix that identifies the subset of objects to
    /// which the rule applies.
    Prefix: String?
    /// Specifies the status of the configuration.
    Status: "Disabled" | "Enabled"
    /// A container for a key-value pair.
    TagFilters: Listing<TagFilter>?
    /// Specifies a list of S3 Intelligent-Tiering storage class tiers in the
    /// configuration. At least one tier must be defined in the list. At most,
    /// you can specify two tiers in the list, one for each available
    /// AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
    Tierings: Listing<Tiering>
}
class Tiering {
    /// S3 Intelligent-Tiering access tier. See Storage class for
    /// automatically optimizing frequently and infrequently accessed objects
    /// for a list of access tiers in the S3 Intelligent-Tiering storage
    /// class.
    AccessTier: "ARCHIVE_ACCESS" | "DEEP_ARCHIVE_ACCESS"
    /// The number of consecutive days of no access after which an object will
    /// be eligible to be transitioned to the corresponding tier. The minimum
    /// number of days specified for Archive Access tier must be at least 90
    /// days and Deep Archive Access tier must be at least 180 days. The
    /// maximum can be up to 2 years (730 days).
    Days: Int
}
class InventoryConfiguration {
    Destination: Destination
    /// Specifies whether the inventory is enabled or disabled.
    Enabled: Boolean
    /// The ID used to identify the inventory configuration.
    Id: String
    /// Object versions to include in the inventory list.
    IncludedObjectVersions: "All" | "Current"
    /// Contains the optional fields that are included in the inventory
    /// results.
    OptionalFields: Listing<"Size" | "LastModifiedDate" | "StorageClass" | "ETag" | "IsMultipartUploaded" | "ReplicationStatus" | "EncryptionStatus" | "ObjectLockRetainUntilDate" | "ObjectLockMode" | "ObjectLockLegalHoldStatus" | "IntelligentTieringAccessTier" | "BucketKeyStatus" | "ChecksumAlgorithm" | "ObjectAccessControlList" | "ObjectOwner">?
    /// The prefix that is prepended to all inventory results.
    Prefix: String?
    /// Specifies the schedule for generating inventory results.
    ScheduleFrequency: "Daily" | "Weekly"
}
class LifecycleConfiguration {
    /// A lifecycle rule for individual objects in an Amazon S3 bucket.
    Rules: Listing<Rule>
}
/// You must specify at least one of the following properties:
/// AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays,
/// NoncurrentVersionExpirationInDays, NoncurrentVersionTransition,
/// NoncurrentVersionTransitions, Transition, or Transitions.
class Rule {
    AbortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
    ExpirationDate: String(matches(Regex(#"^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$"#)))?
    ExpirationInDays: Int?
    ExpiredObjectDeleteMarker: Boolean?
    Id: String(length <= 255)?
    NoncurrentVersionExpirationInDays: Int?
    NoncurrentVersionExpiration: NoncurrentVersionExpiration?
    NoncurrentVersionTransition: NoncurrentVersionTransition?
    NoncurrentVersionTransitions: Listing<NoncurrentVersionTransition>?
    Prefix: String?
    Status: "Enabled" | "Disabled"
    TagFilters: Listing<TagFilter>?
    ObjectSizeGreaterThan: String(length <= 20 && matches(Regex(#"[0-9]+"#)))?
    ObjectSizeLessThan: String(length <= 20 && matches(Regex(#"[0-9]+"#)))?
    Transition: Transition?
    Transitions: Listing<Transition>?
}
/// Specifies the days since the initiation of an incomplete multipart
/// upload that Amazon S3 will wait before permanently removing all parts
/// of the upload.
class AbortIncompleteMultipartUpload {
    /// Specifies the number of days after which Amazon S3 aborts an
    /// incomplete multipart upload.
    DaysAfterInitiation: Int
}
/// Container for the expiration rule that describes when noncurrent
/// objects are expired. If your bucket is versioning-enabled (or
/// versioning is suspended), you can set this action to request that
/// Amazon S3 expire noncurrent object versions at a specific period in
/// the object's lifetime
class NoncurrentVersionExpiration {
    /// Specified the number of days an object is noncurrent before Amazon S3
    /// can perform the associated action
    NoncurrentDays: Int
    /// Specified the number of newer noncurrent and current versions that
    /// must exists before performing the associated action
    NewerNoncurrentVersions: Int?
}
/// Container for the transition rule that describes when noncurrent
/// objects transition to the STANDARD_IA, ONEZONE_IA,
/// INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage
/// class. If your bucket is versioning-enabled (or versioning is
/// suspended), you can set this action to request that Amazon S3
/// transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA,
/// INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage
/// class at a specific period in the object's lifetime.
class NoncurrentVersionTransition {
    /// The class of storage used to store the object.
    StorageClass: "DEEP_ARCHIVE" | "GLACIER" | "Glacier" | "GLACIER_IR" | "INTELLIGENT_TIERING" | "ONEZONE_IA" | "STANDARD_IA"
    /// Specifies the number of days an object is noncurrent before Amazon S3
    /// can perform the associated action.
    TransitionInDays: Int
    /// Specified the number of newer noncurrent and current versions that
    /// must exists before performing the associated action
    NewerNoncurrentVersions: Int?
}
/// You must specify at least one of "TransitionDate" and
/// "TransitionInDays"
class Transition {
    StorageClass: "DEEP_ARCHIVE" | "GLACIER" | "Glacier" | "GLACIER_IR" | "INTELLIGENT_TIERING" | "ONEZONE_IA" | "STANDARD_IA"
    TransitionDate: String(matches(Regex(#"^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$"#)))?
    TransitionInDays: Int?
}
class LoggingConfiguration {
    /// The name of an Amazon S3 bucket where Amazon S3 store server access
    /// log files. You can store log files in any bucket that you own. By
    /// default, logs are stored in the bucket where the LoggingConfiguration
    /// property is defined.
    DestinationBucketName: String?
    LogFilePrefix: String?
    TargetObjectKeyFormat: TargetObjectKeyFormat0 | TargetObjectKeyFormat1 | *Null
}
class TargetObjectKeyFormat0 {
    /// This format defaults the prefix to the given log file prefix for
    /// delivering server access log file.
    SimplePrefix: Mapping
}
class TargetObjectKeyFormat1 {
    PartitionedPrefix: PartitionedPrefix
}
/// This format appends a time based prefix to the given log file prefix
/// for delivering server access log file.
class PartitionedPrefix {
    /// Date Source for creating a partitioned prefix. This can be event time
    /// or delivery time.
    PartitionDateSource: "EventTime" | "DeliveryTime" | *Null
}
class MetricsConfiguration {
    AccessPointArn: String?
    Id: String
    Prefix: String?
    TagFilters: Listing<TagFilter>?
}
/// Describes the notification configuration for an Amazon S3 bucket.
class NotificationConfiguration {
    EventBridgeConfiguration: EventBridgeConfiguration?
    LambdaConfigurations: Listing<LambdaConfiguration>?
    QueueConfigurations: Listing<QueueConfiguration>?
    TopicConfigurations: Listing<TopicConfiguration>?
}
/// Describes the Amazon EventBridge notification configuration for an
/// Amazon S3 bucket.
class EventBridgeConfiguration {
    /// Specifies whether to send notifications to Amazon EventBridge when
    /// events occur in an Amazon S3 bucket.
    EventBridgeEnabled: Boolean
}
/// Describes the AWS Lambda functions to invoke and the events for which
/// to invoke them.
class LambdaConfiguration {
    /// The Amazon S3 bucket event for which to invoke the AWS Lambda
    /// function.
    Event: String
    /// The filtering rules that determine which objects invoke the AWS Lambda
    /// function.
    Filter: NotificationFilter?
    /// The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon
    /// S3 invokes when the specified event type occurs.
    Function: String
}
/// Specifies object key name filtering rules.
class NotificationFilter {
    S3Key: S3KeyFilter
}
/// A container for object key name prefix and suffix filtering rules.
class S3KeyFilter {
    Rules: Listing<FilterRule>
}
/// Specifies the Amazon S3 object key name to filter on and whether to
/// filter on the suffix or prefix of the key name.
class FilterRule {
    Name: String(length <= 1024)
    Value: String
}
/// The Amazon Simple Queue Service queues to publish messages to and the
/// events for which to publish messages.
class QueueConfiguration {
    /// The Amazon S3 bucket event about which you want to publish messages to
    /// Amazon SQS.
    Event: String
    /// The filtering rules that determine which objects trigger
    /// notifications.
    Filter: NotificationFilter?
    /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon
    /// S3 publishes a message when it detects events of the specified type.
    Queue: String
}
/// The topic to which notifications are sent and the events for which
/// notifications are generated.
class TopicConfiguration {
    /// The Amazon S3 bucket event about which to send notifications.
    Event: String
    /// The filtering rules that determine for which objects to send
    /// notifications.
    Filter: NotificationFilter?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon
    /// S3 publishes a message when it detects events of the specified type.
    Topic: String
}
class ObjectLockConfiguration {
    ObjectLockEnabled: String?
    Rule: ObjectLockRule?
}
/// The Object Lock rule in place for the specified object.
class ObjectLockRule {
    DefaultRetention: DefaultRetention?
}
/// The default retention period that you want to apply to new objects
/// placed in the specified bucket.
class DefaultRetention {
    Years: Int?
    Days: Int?
    Mode: "COMPLIANCE" | "GOVERNANCE" | *Null
}
class OwnershipControls {
    Rules: Listing<OwnershipControlsRule>
}
class OwnershipControlsRule {
    /// Specifies an object ownership rule.
    ObjectOwnership: "ObjectWriter" | "BucketOwnerPreferred" | "BucketOwnerEnforced" | *Null
}
/// Configuration that defines how Amazon S3 handles public access.
class PublicAccessBlockConfiguration {
    /// Specifies whether Amazon S3 should block public access control lists
    /// (ACLs) for this bucket and objects in this bucket. Setting this
    /// element to TRUE causes the following behavior: - PUT Bucket acl and
    /// PUT Object acl calls fail if the specified ACL is public.  - PUT
    /// Object calls fail if the request includes a public ACL. Enabling this
    /// setting doesn't affect existing policies or ACLs.
    BlockPublicAcls: Boolean?
    /// Specifies whether Amazon S3 should block public bucket policies for
    /// this bucket. Setting this element to TRUE causes Amazon S3 to reject
    /// calls to PUT Bucket policy if the specified bucket policy allows
    /// public access. Enabling this setting doesn't affect existing bucket
    /// policies.
    BlockPublicPolicy: Boolean?
    /// Specifies whether Amazon S3 should ignore public ACLs for this bucket
    /// and objects in this bucket. Setting this element to TRUE causes Amazon
    /// S3 to ignore all public ACLs on this bucket and objects in this
    /// bucket. Enabling this setting doesn't affect the persistence of any
    /// existing ACLs and doesn't prevent new public ACLs from being set.
    IgnorePublicAcls: Boolean?
    /// Specifies whether Amazon S3 should restrict public bucket policies for
    /// this bucket. Setting this element to TRUE restricts access to this
    /// bucket to only AWS services and authorized users within this account
    /// if the bucket has a public policy. Enabling this setting doesn't
    /// affect previously stored bucket policies, except that public and
    /// cross-account access within any public bucket policy, including non-
    /// public delegation to specific accounts, is blocked.
    RestrictPublicBuckets: Boolean?
}
/// A container for replication rules. You can add up to 1,000 rules. The
/// maximum size of a replication configuration is 2 MB.
class ReplicationConfiguration {
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access
    /// Management (IAM) role that Amazon S3 assumes when replicating objects.
    Role: String
    /// A container for one or more replication rules.
    Rules: Listing<ReplicationRule>
}
/// Specifies which Amazon S3 objects to replicate and where to store the
/// replicas.
class ReplicationRule {
    DeleteMarkerReplication: DeleteMarkerReplication?
    Destination: ReplicationDestination
    Filter: ReplicationRuleFilter?
    /// A unique identifier for the rule.
    Id: String(length <= 255)?
    /// An object key name prefix that identifies the object or objects to
    /// which the rule applies.
    Prefix: String(length <= 1024)?
    Priority: Int?
    SourceSelectionCriteria: SourceSelectionCriteria?
    /// Specifies whether the rule is enabled.
    Status: "Disabled" | "Enabled"
}
class DeleteMarkerReplication {
    Status: "Disabled" | "Enabled" | *Null
}
/// Specifies which Amazon S3 bucket to store replicated objects in and
/// their storage class.
class ReplicationDestination {
    AccessControlTranslation: AccessControlTranslation?
    Account: String?
    Bucket: String
    EncryptionConfiguration: EncryptionConfiguration?
    Metrics: Metrics?
    ReplicationTime: ReplicationTime?
    /// The storage class to use when replicating objects, such as S3 Standard
    /// or reduced redundancy.
    StorageClass: "DEEP_ARCHIVE" | "GLACIER" | "GLACIER_IR" | "INTELLIGENT_TIERING" | "ONEZONE_IA" | "REDUCED_REDUNDANCY" | "STANDARD" | "STANDARD_IA" | *Null
}
/// Specify this only in a cross-account scenario (where source and
/// destination bucket owners are not the same), and you want to change
/// replica ownership to the AWS account that owns the destination bucket.
/// If this is not specified in the replication configuration, the
/// replicas are owned by same AWS account that owns the source object.
class AccessControlTranslation {
    Owner: String
}
/// Specifies encryption-related information for an Amazon S3 bucket that
/// is a destination for replicated objects.
class EncryptionConfiguration {
    /// Specifies the ID (Key ARN or Alias ARN) of the customer managed
    /// customer master key (CMK) stored in AWS Key Management Service (KMS)
    /// for the destination bucket.
    ReplicaKmsKeyID: String
}
class Metrics {
    EventThreshold: ReplicationTimeValue?
    Status: "Disabled" | "Enabled"
}
class ReplicationTimeValue {
    Minutes: Int
}
class ReplicationTime {
    Status: "Disabled" | "Enabled"
    Time: ReplicationTimeValue
}
class ReplicationRuleFilter {
    And: ReplicationRuleAndOperator?
    Prefix: String?
    TagFilter: TagFilter?
}
class ReplicationRuleAndOperator {
    Prefix: String?
    TagFilters: Listing<TagFilter>?
}
/// A container that describes additional filters for identifying the
/// source objects that you want to replicate.
class SourceSelectionCriteria {
    /// A filter that you can specify for selection for modifications on
    /// replicas.
    ReplicaModifications: ReplicaModifications?
    /// A container for filter information for the selection of Amazon S3
    /// objects encrypted with AWS KMS.
    SseKmsEncryptedObjects: SseKmsEncryptedObjects?
}
class ReplicaModifications {
    /// Specifies whether Amazon S3 replicates modifications on replicas.
    Status: "Enabled" | "Disabled"
}
/// A container for filter information for the selection of S3 objects
/// encrypted with AWS KMS.
class SseKmsEncryptedObjects {
    /// Specifies whether Amazon S3 replicates objects created with server-
    /// side encryption using a customer master key (CMK) stored in AWS Key
    /// Management Service.
    Status: "Disabled" | "Enabled"
}
class Tag {
    Key: String(length <= 128 && length >= 1)
    Value: String(length <= 256)
}
/// Describes the versioning state of an Amazon S3 bucket.
class VersioningConfiguration {
    /// The versioning state of the bucket.
    Status: "Enabled" | "Suspended"
}
/// Specifies website configuration parameters for an Amazon S3 bucket.
class WebsiteConfiguration {
    /// The name of the error document for the website.
    ErrorDocument: String?
    /// The name of the index document for the website.
    IndexDocument: String?
    RoutingRules: Listing<RoutingRule>?
    RedirectAllRequestsTo: RedirectAllRequestsTo?
}
/// Specifies the redirect behavior and when a redirect is applied.
class RoutingRule {
    /// Container for redirect information. You can redirect requests to
    /// another host, to another page, or with another protocol. In the event
    /// of an error, you can specify a different error code to return.
    RedirectRule: RedirectRule
    RoutingRuleCondition: RoutingRuleCondition?
}
/// Specifies how requests are redirected. In the event of an error, you
/// can specify a different error code to return.
class RedirectRule {
    /// The host name to use in the redirect request.
    HostName: String?
    /// The HTTP redirect code to use on the response. Not required if one of
    /// the siblings is present.
    HttpRedirectCode: String?
    /// Protocol to use when redirecting requests. The default is the protocol
    /// that is used in the original request.
    Protocol: "http" | "https" | *Null
    /// The object key prefix to use in the redirect request.
    ReplaceKeyPrefixWith: String?
    /// The specific object key to use in the redirect request.d
    ReplaceKeyWith: String?
}
/// A container for describing a condition that must be met for the
/// specified redirect to apply.You must specify at least one of
/// HttpErrorCodeReturnedEquals and KeyPrefixEquals
class RoutingRuleCondition {
    /// The object key name prefix when the redirect is applied.
    KeyPrefixEquals: String?
    /// The HTTP error code when the redirect is applied.
    HttpErrorCodeReturnedEquals: String?
}
/// Specifies the redirect behavior of all requests to a website endpoint
/// of an Amazon S3 bucket.
class RedirectAllRequestsTo {
    /// Name of the host where requests are redirected.
    HostName: String
    /// Protocol to use when redirecting requests. The default is the protocol
    /// that is used in the original request.
    Protocol: "http" | "https" | *Null
}
