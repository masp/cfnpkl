/// Resource Type definition for AWS::Lambda::Function in region
extends ".../AWS/Resource.pkl"
Type = "AWS::Lambda::Function"
Properties: Props?
class Props {
    /// A description of the function.
    Description: String(length <= 256)?
    /// Set Mode to Active to sample and trace a subset of incoming requests
    /// with AWS X-Ray.
    TracingConfig: TracingConfig?
    /// For network connectivity to AWS resources in a VPC, specify a list of
    /// security groups and subnets in the VPC.
    VpcConfig: VpcConfig?
    /// RuntimeManagementConfig
    RuntimeManagementConfig: RuntimeManagementConfig?
    /// The number of simultaneous executions to reserve for the function.
    ReservedConcurrentExecutions: Int?
    /// The SnapStart setting of your function
    SnapStart: SnapStart?
    /// Connection settings for an Amazon EFS file system. To connect a
    /// function to a file system, a mount target must be available in every
    /// Availability Zone that your function connects to. If your template
    /// contains an AWS::EFS::MountTarget resource, you must also specify a
    /// DependsOn attribute to ensure that the mount target is created or
    /// updated before the function.
    FileSystemConfigs: Listing<FileSystemConfig>?
    /// The name of the Lambda function, up to 64 characters in length. If you
    /// don't specify a name, AWS CloudFormation generates one.
    FunctionName: String(length >= 1)?
    /// The identifier of the function's runtime.
    Runtime: String?
    /// The ARN of the AWS Key Management Service (AWS KMS) key that's used to
    /// encrypt your function's environment variables. If it's not provided,
    /// AWS Lambda uses a default service key.
    KmsKeyArn: String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#)))?
    /// PackageType.
    PackageType: "Image" | "Zip" | *Null
    /// A unique Arn for CodeSigningConfig resource
    CodeSigningConfigArn: String(matches(Regex(#"arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}"#)))?
    /// A list of function layers to add to the function's execution
    /// environment. Specify each layer by its ARN, including the version.
    Layers: Listing<String>?
    /// A list of tags to apply to the function.
    Tags: Listing<Tag>?
    /// ImageConfig
    ImageConfig: ImageConfig?
    /// The amount of memory that your function has access to. Increasing the
    /// function's memory also increases its CPU allocation. The default value
    /// is 128 MB. The value must be a multiple of 64 MB.
    MemorySize: Int?
    /// A dead letter queue configuration that specifies the queue or topic
    /// where Lambda sends asynchronous events when they fail processing.
    DeadLetterConfig: DeadLetterConfig?
    /// The amount of time that Lambda allows a function to run before
    /// stopping it. The default is 3 seconds. The maximum allowed value is
    /// 900 seconds.
    Timeout: Int?
    /// The name of the method within your code that Lambda calls to execute
    /// your function. The format includes the file name. It can also include
    /// namespaces and other qualifiers, depending on the runtime
    Handler: String(length <= 128 && matches(Regex(#"^[^\s]+$"#)))?
    /// The SnapStart response of your function
    SnapStartResponse: SnapStartResponse?
    /// The code for the function.
    Code: Code?
    /// The Amazon Resource Name (ARN) of the function's execution role.
    Role: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))?
    /// The logging configuration of your function
    LoggingConfig: LoggingConfig?
    /// Environment variables that are accessible from function code during
    /// execution.
    Environment: Environment?
    /// Unique identifier for function resources
    Arn: String?
    /// A function's ephemeral storage settings.
    EphemeralStorage: EphemeralStorage?
    Architectures: Listing<"x86_64" | "arm64">?
}
/// The function's AWS X-Ray tracing configuration. To sample and record
/// incoming requests, set Mode to Active.
class TracingConfig {
    /// The tracing mode.
    Mode: "Active" | "PassThrough" | *Null
}
/// The VPC security groups and subnets that are attached to a Lambda
/// function. When you connect a function to a VPC, Lambda creates an
/// elastic network interface for each combination of security group and
/// subnet in the function's VPC configuration. The function can only
/// access resources and the internet through that VPC.
class VpcConfig {
    /// A boolean indicating whether IPv6 protocols will be allowed for dual
    /// stack subnets
    Ipv6AllowedForDualStack: Boolean?
    /// A list of VPC security groups IDs.
    SecurityGroupIds: Listing<String>?
    /// A list of VPC subnet IDs.
    SubnetIds: Listing<String>?
}
class RuntimeManagementConfig {
    /// Trigger for runtime update
    UpdateRuntimeOn: "Auto" | "FunctionUpdate" | "Manual"
    /// Unique identifier for a runtime version arn
    RuntimeVersionArn: String?
}
/// The function's SnapStart setting. When set to PublishedVersions,
/// Lambda creates a snapshot of the execution environment when you
/// publish a function version.
class SnapStart {
    /// Applying SnapStart setting on function resource type.
    ApplyOn: "PublishedVersions" | "None"
}
class FileSystemConfig {
    /// The Amazon Resource Name (ARN) of the Amazon EFS access point that
    /// provides access to the file system.
    Arn: String(length <= 200 && matches(Regex(#"^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$"#)))
    /// The path where the function can access the file system, starting with
    /// /mnt/.
    LocalMountPath: String(length <= 160 && matches(Regex(#"^/mnt/[a-zA-Z0-9-_.]+$"#)))
}
class Tag {
    /// The value for the tag. You can specify a value that is 0 to 256
    /// Unicode characters in length and cannot be prefixed with aws:. You can
    /// use any of the following characters: the set of Unicode letters,
    /// digits, whitespace, _, ., /, =, +, and -.
    Value: String(length <= 256 && length >= 0)?
    /// The key name of the tag. You can specify a value that is 1 to 128
    /// Unicode characters in length and cannot be prefixed with aws:. You can
    /// use any of the following characters: the set of Unicode letters,
    /// digits, whitespace, _, ., /, =, +, and -.
    Key: String(length <= 128 && length >= 1)
}
class ImageConfig {
    /// WorkingDirectory.
    WorkingDirectory: String?
    /// Command.
    Command: Listing<String>?
    /// EntryPoint.
    EntryPoint: Listing<String>?
}
/// The dead-letter queue for failed asynchronous invocations.
class DeadLetterConfig {
    /// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS
    /// topic.
    TargetArn: String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#)))?
}
/// The function's SnapStart Response. When set to PublishedVersions,
/// Lambda creates a snapshot of the execution environment when you
/// publish a function version.
class SnapStartResponse {
    /// Indicates whether SnapStart is activated for the specified function
    /// version.
    OptimizationStatus: "On" | "Off" | *Null
    /// Applying SnapStart setting on function resource type.
    ApplyOn: "PublishedVersions" | "None" | *Null
}
class Code {
    /// For versioned objects, the version of the deployment package object to
    /// use.
    S3ObjectVersion: String(length <= 1024 && length >= 1)?
    /// An Amazon S3 bucket in the same AWS Region as your function. The
    /// bucket can be in a different AWS account.
    S3Bucket: String(length <= 63 && length >= 3 && matches(Regex(#"^[0-9A-Za-z\.\-_]*(?<!\.)$"#)))?
    /// The source code of your Lambda function. If you include your function
    /// source inline with this parameter, AWS CloudFormation places it in a
    /// file named index and zips it to create a deployment package..
    ZipFile: String?
    /// The Amazon S3 key of the deployment package.
    S3Key: String(length <= 1024 && length >= 1)?
    /// ImageUri.
    ImageUri: String?
}
/// The function's logging configuration.
class LoggingConfig {
    /// Log delivery format for the lambda function
    LogFormat: "Text" | "JSON" | *Null
    /// Application log granularity level, can only be used when LogFormat is
    /// set to JSON
    ApplicationLogLevel: "TRACE" | "DEBUG" | "INFO" | "WARN" | "ERROR" | "FATAL" | *Null
    /// The log group name.
    LogGroup: String(length <= 512 && length >= 1 && matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#)))?
    /// System log granularity level, can only be used when LogFormat is set
    /// to JSON
    SystemLogLevel: "DEBUG" | "INFO" | "WARN" | *Null
}
/// A function's environment variable settings.
class Environment {
    /// Environment variable key-value pairs.
    Variables: Mapping?
}
/// A function's ephemeral storage settings.
class EphemeralStorage {
    /// The amount of ephemeral storage that your function has access to.
    Size: Int
}
