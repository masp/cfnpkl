/// Resource Type definition for AWS::GlobalAccelerator::EndpointGroup
extends ".../AWS/Resource.pkl"
Type = "AWS::GlobalAccelerator::EndpointGroup"
Properties: Props?
class Props {
    /// The Amazon Resource Name (ARN) of the listener
    ListenerArn: String?
    /// The name of the AWS Region where the endpoint group is located
    EndpointGroupRegion: String?
    /// The list of endpoint objects.
    EndpointConfigurations: Listing<EndpointConfiguration>?
    /// The percentage of traffic to sent to an AWS Region
    TrafficDialPercentage: Float?
    /// The port that AWS Global Accelerator uses to check the health of
    /// endpoints in this endpoint group.
    HealthCheckPort: Int?
    /// The protocol that AWS Global Accelerator uses to check the health of
    /// endpoints in this endpoint group.
    HealthCheckProtocol: "TCP" | "HTTP" | "HTTPS" | *Null
    HealthCheckPath: String?
    /// The time in seconds between each health check for an endpoint. Must be
    /// a value of 10 or 30
    HealthCheckIntervalSeconds: Int?
    /// The number of consecutive health checks required to set the state of
    /// the endpoint to unhealthy.
    ThresholdCount: Int?
    /// The Amazon Resource Name (ARN) of the endpoint group
    EndpointGroupArn: String?
    PortOverrides: Listing<PortOverride>?
}
/// The configuration for a given endpoint
class EndpointConfiguration {
    /// Id of the endpoint. For Network/Application Load Balancer this value
    /// is the ARN.  For EIP, this value is the allocation ID.  For EC2
    /// instances, this is the EC2 instance ID
    EndpointId: String
    /// Attachment ARN that provides access control to the cross account
    /// endpoint. Not required for resources hosted in the same account as the
    /// endpoint group.
    AttachmentArn: String?
    /// The weight for the endpoint.
    Weight: Int?
    /// true if client ip should be preserved
    ClientIPPreservationEnabled: Boolean?
}
/// listener to endpoint port mapping.
class PortOverride {
    ListenerPort: Int
    EndpointPort: Int
}
