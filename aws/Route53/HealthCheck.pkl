/// Resource schema for AWS::Route53::HealthCheck.
extends ".../AWS/Resource.pkl"
Type = "AWS::Route53::HealthCheck"
Properties: Props?
class Props {
    HealthCheckId: String?
    /// A complex type that contains information about the health check.
    HealthCheckConfig: HealthCheckConfig?
    /// An array of key-value pairs to apply to this resource.
    HealthCheckTags: Listing<HealthCheckTag>?
}
/// A complex type that contains information about the health check.
class HealthCheckConfig {
    AlarmIdentifier: AlarmIdentifier?
    ChildHealthChecks: Listing<String>?
    EnableSNI: Boolean?
    FailureThreshold: Int?
    FullyQualifiedDomainName: String(length <= 255)?
    HealthThreshold: Int?
    InsufficientDataHealthStatus: "Healthy" | "LastKnownStatus" | "Unhealthy" | *Null
    Inverted: Boolean?
    IPAddress: String(length <= 45 && matches(Regex(#"^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"#)))?
    MeasureLatency: Boolean?
    Port: Int?
    Regions: Listing<String>?
    RequestInterval: Int?
    ResourcePath: String(length <= 255)?
    SearchString: String(length <= 255)?
    RoutingControlArn: String(length <= 255 && length >= 1)?
    Type: "CALCULATED" | "CLOUDWATCH_METRIC" | "HTTP" | "HTTP_STR_MATCH" | "HTTPS" | "HTTPS_STR_MATCH" | "TCP" | "RECOVERY_CONTROL"
}
/// A complex type that identifies the CloudWatch alarm that you want
/// Amazon Route 53 health checkers to use to determine whether the
/// specified health check is healthy.
class AlarmIdentifier {
    /// The name of the CloudWatch alarm that you want Amazon Route 53 health
    /// checkers to use to determine whether this health check is healthy.
    Name: String(length <= 256 && length >= 1)
    /// For the CloudWatch alarm that you want Route 53 health checkers to use
    /// to determine whether this health check is healthy, the region that the
    /// alarm was created in.
    Region: String
}
/// A key-value pair to associate with a resource.
class HealthCheckTag {
    /// The key name of the tag.
    Key: String(length <= 128)
    /// The value for the tag.
    Value: String(length <= 256)
}
